
spi_for_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004780  08004780  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004780  08004780  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00005780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004788  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08004794  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004794  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7da  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbe  00000000  00000000  0001381c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000154e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  00016068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ba7  00000000  00000000  00016909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e20c  00000000  00000000  000374b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d25ee  00000000  00000000  000456bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd8  00000000  00000000  00117cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0011acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08004758 	.word	0x08004758

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08004758 	.word	0x08004758

08000298 <AD7683_Read>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t AD7683_Read(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
    uint16_t data = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	80fb      	strh	r3, [r7, #6]

    // Читаем данные из АЦП
    if (HAL_SPI_Receive(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80002a2:	1db9      	adds	r1, r7, #6
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	2201      	movs	r2, #1
 80002aa:	4806      	ldr	r0, [pc, #24]	@ (80002c4 <AD7683_Read+0x2c>)
 80002ac:	f003 ffd8 	bl	8004260 <HAL_SPI_Receive>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <AD7683_Read+0x22>
        // Ошибка при приеме данных
        Error_Handler();
 80002b6:	f000 f9fd 	bl	80006b4 <Error_Handler>
    }

    return data;
 80002ba:	88fb      	ldrh	r3, [r7, #6]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000a4 	.word	0x200000a4

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 fbf6 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f000 f824 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d4:	f000 f98e 	bl	80005f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002d8:	f000 f88c 	bl	80003f4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80002dc:	f000 f8ee 	bl	80004bc <MX_DAC1_Init>
  MX_SPI1_Init();
 80002e0:	f000 f930 	bl	8000544 <MX_SPI1_Init>
  MX_ICACHE_Init();
 80002e4:	f000 f922 	bl	800052c <MX_ICACHE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AD7683_Read();
 80002e8:	f7ff ffd6 	bl	8000298 <AD7683_Read>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2101      	movs	r1, #1
 80002f0:	4809      	ldr	r0, [pc, #36]	@ (8000318 <main+0x50>)
 80002f2:	f002 f89d 	bl	8002430 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fa:	f000 fc9d 	bl	8000c38 <HAL_Delay>
	  AD7683_Read();
 80002fe:	f7ff ffcb 	bl	8000298 <AD7683_Read>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2101      	movs	r1, #1
 8000306:	4804      	ldr	r0, [pc, #16]	@ (8000318 <main+0x50>)
 8000308:	f002 f892 	bl	8002430 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800030c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000310:	f000 fc92 	bl	8000c38 <HAL_Delay>
	  AD7683_Read();
 8000314:	bf00      	nop
 8000316:	e7e7      	b.n	80002e8 <main+0x20>
 8000318:	42020400 	.word	0x42020400

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09c      	sub	sp, #112	@ 0x70
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0320 	add.w	r3, r7, #32
 8000326:	2250      	movs	r2, #80	@ 0x50
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 f9e7 	bl	80046fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
 8000340:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000342:	4b2b      	ldr	r3, [pc, #172]	@ (80003f0 <SystemClock_Config+0xd4>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	4a2a      	ldr	r2, [pc, #168]	@ (80003f0 <SystemClock_Config+0xd4>)
 8000348:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800034c:	6113      	str	r3, [r2, #16]
 800034e:	4b28      	ldr	r3, [pc, #160]	@ (80003f0 <SystemClock_Config+0xd4>)
 8000350:	691b      	ldr	r3, [r3, #16]
 8000352:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800035a:	bf00      	nop
 800035c:	4b24      	ldr	r3, [pc, #144]	@ (80003f0 <SystemClock_Config+0xd4>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	2b08      	cmp	r3, #8
 8000366:	d1f9      	bne.n	800035c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
 8000368:	2318      	movs	r3, #24
 800036a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800036c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000370:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000376:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000378:	2320      	movs	r3, #32
 800037a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	2302      	movs	r3, #2
 800037e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000380:	2302      	movs	r3, #2
 8000382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000384:	2301      	movs	r3, #1
 8000386:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000388:	2320      	movs	r3, #32
 800038a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800038c:	2302      	movs	r3, #2
 800038e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000390:	2302      	movs	r3, #2
 8000392:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000394:	2302      	movs	r3, #2
 8000396:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000398:	2308      	movs	r3, #8
 800039a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800039c:	2300      	movs	r3, #0
 800039e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 f869 	bl	8002480 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003b4:	f000 f97e 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	231f      	movs	r3, #31
 80003ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2303      	movs	r3, #3
 80003be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003c0:	2308      	movs	r3, #8
 80003c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	2103      	movs	r1, #3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fc8a 	bl	8002cf0 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80003e2:	f000 f967 	bl	80006b4 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3770      	adds	r7, #112	@ 0x70
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	44020800 	.word	0x44020800

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	463b      	mov	r3, r7
 80003fc:	2220      	movs	r2, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f004 f97c 	bl	80046fe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000406:	4b2b      	ldr	r3, [pc, #172]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000408:	4a2b      	ldr	r2, [pc, #172]	@ (80004b8 <MX_ADC1_Init+0xc4>)
 800040a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800040c:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800040e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000412:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000420:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000428:	2204      	movs	r2, #4
 800042a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800044e:	2200      	movs	r2, #0
 8000450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800045a:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000462:	2200      	movs	r2, #0
 8000464:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000466:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046e:	4811      	ldr	r0, [pc, #68]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 8000470:	f000 fe02 	bl	8001078 <HAL_ADC_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f91b 	bl	80006b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800047e:	2301      	movs	r3, #1
 8000480:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000482:	2306      	movs	r3, #6
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048a:	237f      	movs	r3, #127	@ 0x7f
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	@ (80004b4 <MX_ADC1_Init+0xc0>)
 800049c:	f000 ff3a 	bl	8001314 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80004a6:	f000 f905 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000028 	.word	0x20000028
 80004b8:	42028000 	.word	0x42028000

080004bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08c      	sub	sp, #48	@ 0x30
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	222c      	movs	r2, #44	@ 0x2c
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f004 f918 	bl	80046fe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004ce:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <MX_DAC1_Init+0x68>)
 80004d0:	4a15      	ldr	r2, [pc, #84]	@ (8000528 <MX_DAC1_Init+0x6c>)
 80004d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004d4:	4813      	ldr	r0, [pc, #76]	@ (8000524 <MX_DAC1_Init+0x68>)
 80004d6:	f001 fc81 	bl	8001ddc <HAL_DAC_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004e0:	f000 f8e8 	bl	80006b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80004fc:	2304      	movs	r3, #4
 80004fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	@ (8000524 <MX_DAC1_Init+0x68>)
 800050c:	f001 fc88 	bl	8001e20 <HAL_DAC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8000516:	f000 f8cd 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3730      	adds	r7, #48	@ 0x30
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000090 	.word	0x20000090
 8000528:	42028400 	.word	0x42028400

0800052c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000530:	f001 ff96 	bl	8002460 <HAL_ICACHE_Enable>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800053a:	f000 f8bb 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <MX_SPI1_Init+0xa8>)
 800054a:	4a29      	ldr	r2, [pc, #164]	@ (80005f0 <MX_SPI1_Init+0xac>)
 800054c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054e:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000550:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000556:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000558:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800055c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000560:	220f      	movs	r2, #15
 8000562:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <MX_SPI1_Init+0xa8>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000572:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000576:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <MX_SPI1_Init+0xa8>)
 800057a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800057e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000580:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000586:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800058c:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <MX_SPI1_Init+0xa8>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <MX_SPI1_Init+0xa8>)
 8000594:	2207      	movs	r2, #7
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_SPI1_Init+0xa8>)
 800059a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_SPI1_Init+0xa8>)
 80005d8:	f003 fd46 	bl	8004068 <HAL_SPI_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80005e2:	f000 f867 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000a4 	.word	0x200000a4
 80005f0:	40013000 	.word	0x40013000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <MX_GPIO_Init+0xb8>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	4a26      	ldr	r2, [pc, #152]	@ (80006ac <MX_GPIO_Init+0xb8>)
 8000612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000616:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800061a:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <MX_GPIO_Init+0xb8>)
 800061c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <MX_GPIO_Init+0xb8>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ac <MX_GPIO_Init+0xb8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_GPIO_Init+0xb8>)
 800063a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_GPIO_Init+0xb8>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_GPIO_Init+0xb8>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_GPIO_Init+0xb8>)
 8000658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <MX_GPIO_Init+0xbc>)
 800066a:	f001 fee1 	bl	8002430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066e:	2301      	movs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <MX_GPIO_Init+0xbc>)
 8000686:	f001 fd81 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 800068a:	f240 4302 	movw	r3, #1026	@ 0x402
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_GPIO_Init+0xbc>)
 80006a0:	f001 fd74 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	44020c00 	.word	0x44020c00
 80006b0:	42020400 	.word	0x42020400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ac      	sub	sp, #176	@ 0xb0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2288      	movs	r2, #136	@ 0x88
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 f804 	bl	80046fe <memset>
  if(hadc->Instance==ADC1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <HAL_ADC_MspInit+0xb8>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d13e      	bne.n	800077e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000700:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800070c:	2300      	movs	r3, #0
 800070e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fdeb 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8000720:	f7ff ffc8 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 8000726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 800072c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000730:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 8000736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 8000744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000748:	4a10      	ldr	r2, [pc, #64]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000766:	2303      	movs	r3, #3
 8000768:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <HAL_ADC_MspInit+0xc0>)
 800077a:	f001 fd07 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	37b0      	adds	r7, #176	@ 0xb0
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	42028000 	.word	0x42028000
 800078c:	44020c00 	.word	0x44020c00
 8000790:	42020000 	.word	0x42020000

08000794 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0ac      	sub	sp, #176	@ 0xb0
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2288      	movs	r2, #136	@ 0x88
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 ffa2 	bl	80046fe <memset>
  if(hdac->Instance==DAC1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <HAL_DAC_MspInit+0xb4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d13c      	bne.n	800083e <HAL_DAC_MspInit+0xaa>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DAC;
 80007c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80007c8:	f04f 0300 	mov.w	r3, #0
 80007cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fd8b 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 80007e0:	f7ff ff68 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 80007e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 80007ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 80007f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 8000804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000808:	4a10      	ldr	r2, [pc, #64]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_DAC_MspInit+0xb8>)
 8000814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000820:	2310      	movs	r3, #16
 8000822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_DAC_MspInit+0xbc>)
 800083a:	f001 fca7 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	37b0      	adds	r7, #176	@ 0xb0
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	42028400 	.word	0x42028400
 800084c:	44020c00 	.word	0x44020c00
 8000850:	42020000 	.word	0x42020000

08000854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ac      	sub	sp, #176	@ 0xb0
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2288      	movs	r2, #136	@ 0x88
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f003 ff42 	bl	80046fe <memset>
  if(hspi->Instance==SPI1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d144      	bne.n	800090e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000884:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000890:	2300      	movs	r3, #0
 8000892:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fd29 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80008a4:	f7ff ff06 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008ae:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008cc:	4a13      	ldr	r2, [pc, #76]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_NSS
    PA2     ------> SPI1_SCK
    PA3     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008e4:	230e      	movs	r3, #14
 80008e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 80008fc:	2304      	movs	r3, #4
 80008fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_SPI_MspInit+0xcc>)
 800090a:	f001 fc3f 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	37b0      	adds	r7, #176	@ 0xb0
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40013000 	.word	0x40013000
 800091c:	44020c00 	.word	0x44020c00
 8000920:	42020000 	.word	0x42020000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <MemManage_Handler+0x4>

0800093c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <UsageFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f93d 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800098a:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <SystemInit+0xc8>)
 800098c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000990:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <SystemInit+0xc8>)
 8000992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000996:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800099a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <SystemInit+0xcc>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <SystemInit+0xcc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <SystemInit+0xcc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <SystemInit+0xcc>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4927      	ldr	r1, [pc, #156]	@ (8000a50 <SystemInit+0xcc>)
 80009b2:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <SystemInit+0xd0>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <SystemInit+0xcc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <SystemInit+0xcc>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80009c4:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <SystemInit+0xcc>)
 80009c6:	4a24      	ldr	r2, [pc, #144]	@ (8000a58 <SystemInit+0xd4>)
 80009c8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <SystemInit+0xcc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <SystemInit+0xcc>)
 80009d2:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <SystemInit+0xd4>)
 80009d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <SystemInit+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <SystemInit+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <SystemInit+0xcc>)
 80009e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <SystemInit+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <SystemInit+0xc8>)
 80009f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009f4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <SystemInit+0xd8>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80009fe:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000a06:	d003      	beq.n	8000a10 <SystemInit+0x8c>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000a0e:	d117      	bne.n	8000a40 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <SystemInit+0xd8>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <SystemInit+0xd8>)
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <SystemInit+0xdc>)
 8000a20:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <SystemInit+0xd8>)
 8000a24:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <SystemInit+0xe0>)
 8000a26:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <SystemInit+0xd8>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <SystemInit+0xd8>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <SystemInit+0xd8>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <SystemInit+0xd8>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	61d3      	str	r3, [r2, #28]
  }
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	44020c00 	.word	0x44020c00
 8000a54:	fae2eae3 	.word	0xfae2eae3
 8000a58:	01010280 	.word	0x01010280
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	08192a3b 	.word	0x08192a3b
 8000a64:	4c5d6e7f 	.word	0x4c5d6e7f

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a78:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
	ldr	r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a88:	f842 3b04 	str.w	r3, [r2], #4

08000a8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <LoopForever+0x16>)
	cmp	r2, r3
 8000a8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a92:	f7ff ff77 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 fe3b 	bl	8004710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fc15 	bl	80002c8 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000aa0:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000aa4:	08004788 	.word	0x08004788
	ldr	r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ab4:	20000138 	.word	0x20000138

08000ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_IRQHandler>
	...

08000abc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f001 f8b6 	bl	8001c32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ac6:	f002 facb 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_Init+0x44>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	490b      	ldr	r1, [pc, #44]	@ (8000b04 <HAL_Init+0x48>)
 8000ad6:	5ccb      	ldrb	r3, [r1, r3]
 8000ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x4c>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f001 f8ed 	bl	8001cc0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f810 	bl	8000b0c <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e002      	b.n	8000afc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000af6:	f7ff fde3 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	44020c00 	.word	0x44020c00
 8000b04:	08004770 	.word	0x08004770
 8000b08:	20000000 	.word	0x20000000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e05c      	b.n	8000bde <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000b24:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <HAL_InitTick+0xe0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d10c      	bne.n	8000b4a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e037      	b.n	8000bba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000b4a:	f001 f911 	bl	8001d70 <HAL_SYSTICK_GetCLKSourceConfig>
 8000b4e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d023      	beq.n	8000b9e <HAL_InitTick+0x92>
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d82d      	bhi.n	8000bb8 <HAL_InitTick+0xac>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_InitTick+0x5e>
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d00d      	beq.n	8000b84 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b68:	e026      	b.n	8000bb8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	60fb      	str	r3, [r7, #12]
        break;
 8000b82:	e01a      	b.n	8000bba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b92:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	60fb      	str	r3, [r7, #12]
        break;
 8000b9c:	e00d      	b.n	8000bba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	60fb      	str	r3, [r7, #12]
        break;
 8000bb6:	e000      	b.n	8000bba <HAL_InitTick+0xae>
        break;
 8000bb8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f001 f85e 	bl	8001c7c <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e009      	b.n	8000bde <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	f001 f839 	bl	8001c48 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	e000e010 	.word	0xe000e010
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000134 	.word	0x20000134

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000134 	.word	0x20000134

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	609a      	str	r2, [r3, #8]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000cf6:	f043 0202 	orr.w	r2, r3, #2
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000d16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	42028000 	.word	0x42028000

08000d34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3360      	adds	r3, #96	@ 0x60
 8000d46:	461a      	mov	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <LL_ADC_SetOffset+0x44>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	03fff000 	.word	0x03fff000

08000d7c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3360      	adds	r3, #96	@ 0x60
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3360      	adds	r3, #96	@ 0x60
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dd2:	bf00      	nop
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b087      	sub	sp, #28
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3360      	adds	r3, #96	@ 0x60
 8000dee:	461a      	mov	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e08:	bf00      	nop
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3360      	adds	r3, #96	@ 0x60
 8000e24:	461a      	mov	r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e3e:	bf00      	nop
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	615a      	str	r2, [r3, #20]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3330      	adds	r3, #48	@ 0x30
 8000e80:	461a      	mov	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	211f      	movs	r1, #31
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0e9b      	lsrs	r3, r3, #26
 8000ea8:	f003 011f 	and.w	r1, r3, #31
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3314      	adds	r3, #20
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	0e5b      	lsrs	r3, r3, #25
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	0d1b      	lsrs	r3, r3, #20
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	401a      	ands	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	0d1b      	lsrs	r3, r3, #20
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0318 	and.w	r3, r3, #24
 8000f42:	4908      	ldr	r1, [pc, #32]	@ (8000f64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f44:	40d9      	lsrs	r1, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	400b      	ands	r3, r1
 8000f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	000fffff 	.word	0x000fffff

08000f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6093      	str	r3, [r2, #8]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fa0:	d101      	bne.n	8000fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <LL_ADC_IsEnabled+0x18>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <LL_ADC_IsEnabled+0x1a>
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b04      	cmp	r3, #4
 800103c:	d101      	bne.n	8001042 <LL_ADC_REG_IsConversionOngoing+0x18>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b08      	cmp	r3, #8
 8001062:	d101      	bne.n	8001068 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e131      	b.n	80012f6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	2b00      	cmp	r3, #0
 800109e:	d109      	bne.n	80010b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fb15 	bl	80006d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff67 	bl	8000f8c <LL_ADC_IsDeepPowerDownEnabled>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff4d 	bl	8000f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff82 	bl	8000fdc <LL_ADC_IsInternalRegulatorEnabled>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d115      	bne.n	800110a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff66 	bl	8000fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e8:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_ADC_Init+0x288>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	099b      	lsrs	r3, r3, #6
 80010ee:	4a85      	ldr	r2, [pc, #532]	@ (8001304 <HAL_ADC_Init+0x28c>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	3301      	adds	r3, #1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010fc:	e002      	b.n	8001104 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3b01      	subs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f9      	bne.n	80010fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff64 	bl	8000fdc <LL_ADC_IsInternalRegulatorEnabled>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff75 	bl	800102a <LL_ADC_REG_IsConversionOngoing>
 8001140:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80ca 	bne.w	80012e4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80c6 	bne.w	80012e4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001160:	f043 0202 	orr.w	r2, r3, #2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff49 	bl	8001004 <LL_ADC_IsEnabled>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10b      	bne.n	8001190 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001178:	4863      	ldr	r0, [pc, #396]	@ (8001308 <HAL_ADC_Init+0x290>)
 800117a:	f7ff ff43 	bl	8001004 <LL_ADC_IsEnabled>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4619      	mov	r1, r3
 800118a:	4860      	ldr	r0, [pc, #384]	@ (800130c <HAL_ADC_Init+0x294>)
 800118c:	f7ff fd78 	bl	8000c80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e5b      	ldrb	r3, [r3, #25]
 8001194:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800119a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d106      	bne.n	80011cc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	3b01      	subs	r3, #1
 80011c4:	045b      	lsls	r3, r3, #17
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <HAL_ADC_Init+0x298>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff1a 	bl	8001050 <LL_ADC_INJ_IsConversionOngoing>
 800121c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d13d      	bne.n	80012a0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13a      	bne.n	80012a0 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7e1b      	ldrb	r3, [r3, #24]
 800122e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001236:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001246:	f023 0302 	bic.w	r3, r3, #2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	430b      	orrs	r3, r1
 8001252:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d118      	bne.n	8001290 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001274:	4311      	orrs	r1, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800127a:	4311      	orrs	r1, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001280:	430a      	orrs	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	e007      	b.n	80012a0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10c      	bne.n	80012c2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f023 010f 	bic.w	r1, r3, #15
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c0:	e007      	b.n	80012d2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 020f 	bic.w	r2, r2, #15
 80012d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f023 0303 	bic.w	r3, r3, #3
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80012e2:	e007      	b.n	80012f4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	f043 0210 	orr.w	r2, r3, #16
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	053e2d63 	.word	0x053e2d63
 8001308:	42028000 	.word	0x42028000
 800130c:	42028300 	.word	0x42028300
 8001310:	fff04007 	.word	0xfff04007

08001314 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0b6      	sub	sp, #216	@ 0xd8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x22>
 8001332:	2302      	movs	r3, #2
 8001334:	e3d8      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x7d4>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe71 	bl	800102a <LL_ADC_REG_IsConversionOngoing>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 83bd 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d104      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fcd5 	bl	8000d0c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f7ff fd7e 	bl	8000e70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe56 	bl	800102a <LL_ADC_REG_IsConversionOngoing>
 800137e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fe62 	bl	8001050 <LL_ADC_INJ_IsConversionOngoing>
 800138c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001390:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 81d9 	bne.w	800174c <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800139a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 81d4 	bne.w	800174c <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013ac:	d10f      	bne.n	80013ce <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fd85 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd3f 	bl	8000e4a <LL_ADC_SetSamplingTimeCommonConfig>
 80013cc:	e00e      	b.n	80013ec <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	461a      	mov	r2, r3
 80013dc:	f7ff fd74 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fd2f 	bl	8000e4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d022      	beq.n	8001454 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800141e:	f7ff fc89 	bl	8000d34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6919      	ldr	r1, [r3, #16]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	461a      	mov	r2, r3
 8001430:	f7ff fcd5 	bl	8000dde <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <HAL_ADC_ConfigChannel+0x136>
 8001444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001448:	e000      	b.n	800144c <HAL_ADC_ConfigChannel+0x138>
 800144a:	2300      	movs	r3, #0
 800144c:	461a      	mov	r2, r3
 800144e:	f7ff fce1 	bl	8000e14 <LL_ADC_SetOffsetSaturation>
 8001452:	e17b      	b.n	800174c <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc8e 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10a      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x16c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc83 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 021f 	and.w	r2, r3, #31
 800147e:	e01e      	b.n	80014be <HAL_ADC_ConfigChannel+0x1aa>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc78 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800149e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80014a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 80014ae:	2320      	movs	r3, #32
 80014b0:	e004      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80014b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d105      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x1c2>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0e9b      	lsrs	r3, r3, #26
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	e018      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1f4>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80014ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80014f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80014fa:	2320      	movs	r3, #32
 80014fc:	e004      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80014fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001508:	429a      	cmp	r2, r3
 800150a:	d106      	bne.n	800151a <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fc47 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fc2b 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10a      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x232>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc20 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	0e9b      	lsrs	r3, r3, #26
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	e01e      	b.n	8001584 <HAL_ADC_ConfigChannel+0x270>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc15 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800156c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001574:	2320      	movs	r3, #32
 8001576:	e004      	b.n	8001582 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_ADC_ConfigChannel+0x288>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e9b      	lsrs	r3, r3, #26
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	e018      	b.n	80015ce <HAL_ADC_ConfigChannel+0x2ba>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80015b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80015b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 80015c0:	2320      	movs	r3, #32
 80015c2:	e004      	b.n	80015ce <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80015c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d106      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	2101      	movs	r1, #1
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbe4 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fbc8 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <HAL_ADC_ConfigChannel+0x2f8>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2102      	movs	r1, #2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fbbd 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	0e9b      	lsrs	r3, r3, #26
 8001606:	f003 021f 	and.w	r2, r3, #31
 800160a:	e01e      	b.n	800164a <HAL_ADC_ConfigChannel+0x336>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2102      	movs	r1, #2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fbb2 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800162a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800162e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001632:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800163a:	2320      	movs	r3, #32
 800163c:	e004      	b.n	8001648 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 800163e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x34e>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0e9b      	lsrs	r3, r3, #26
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	e016      	b.n	8001690 <HAL_ADC_ConfigChannel+0x37c>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800167a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8001682:	2320      	movs	r3, #32
 8001684:	e004      	b.n	8001690 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8001686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb83 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2103      	movs	r1, #3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb67 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x3ba>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2103      	movs	r1, #3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb5c 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	0e9b      	lsrs	r3, r3, #26
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	e017      	b.n	80016fe <HAL_ADC_ConfigChannel+0x3ea>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2103      	movs	r1, #3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb51 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80016ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e003      	b.n	80016fc <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80016f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x402>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	e011      	b.n	800173a <HAL_ADC_ConfigChannel+0x426>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001726:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800172e:	2320      	movs	r3, #32
 8001730:	e003      	b.n	800173a <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8001732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800173a:	429a      	cmp	r2, r3
 800173c:	d106      	bne.n	800174c <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	2103      	movs	r1, #3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fb2e 	bl	8000da8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fc57 	bl	8001004 <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 813f 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	461a      	mov	r2, r3
 800176c:	f7ff fbd8 	bl	8000f20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a8e      	ldr	r2, [pc, #568]	@ (80019b0 <HAL_ADC_ConfigChannel+0x69c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f040 8130 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x490>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0e9b      	lsrs	r3, r3, #26
 8001792:	3301      	adds	r3, #1
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	2b09      	cmp	r3, #9
 800179a:	bf94      	ite	ls
 800179c:	2301      	movls	r3, #1
 800179e:	2300      	movhi	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	e019      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x4c4>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80017b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80017b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80017bc:	2320      	movs	r3, #32
 80017be:	e003      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80017c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b09      	cmp	r3, #9
 80017d0:	bf94      	ite	ls
 80017d2:	2301      	movls	r3, #1
 80017d4:	2300      	movhi	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d079      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d107      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x4e4>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0e9b      	lsrs	r3, r3, #26
 80017ee:	3301      	adds	r3, #1
 80017f0:	069b      	lsls	r3, r3, #26
 80017f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017f6:	e015      	b.n	8001824 <HAL_ADC_ConfigChannel+0x510>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001808:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800180a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e003      	b.n	800181c <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8001814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x530>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	3301      	adds	r3, #1
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	e017      	b.n	8001874 <HAL_ADC_ConfigChannel+0x560>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001854:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e003      	b.n	8001868 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8001860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	3301      	adds	r3, #1
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	ea42 0103 	orr.w	r1, r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_ADC_ConfigChannel+0x586>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	3301      	adds	r3, #1
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	051b      	lsls	r3, r3, #20
 8001898:	e018      	b.n	80018cc <HAL_ADC_ConfigChannel+0x5b8>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80018a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80018ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80018b2:	2320      	movs	r3, #32
 80018b4:	e003      	b.n	80018be <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80018b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018cc:	430b      	orrs	r3, r1
 80018ce:	e080      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x5d8>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e9b      	lsrs	r3, r3, #26
 80018e2:	3301      	adds	r3, #1
 80018e4:	069b      	lsls	r3, r3, #26
 80018e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018ea:	e015      	b.n	8001918 <HAL_ADC_ConfigChannel+0x604>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80018fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	e003      	b.n	8001910 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8001908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	069b      	lsls	r3, r3, #26
 8001914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x624>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0e9b      	lsrs	r3, r3, #26
 800192a:	3301      	adds	r3, #1
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	e017      	b.n	8001968 <HAL_ADC_ConfigChannel+0x654>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	61fb      	str	r3, [r7, #28]
  return result;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8001950:	2320      	movs	r3, #32
 8001952:	e003      	b.n	800195c <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	ea42 0103 	orr.w	r1, r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x680>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	3301      	adds	r3, #1
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1e      	subs	r3, #30
 800198c:	051b      	lsls	r3, r3, #20
 800198e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001992:	e01d      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x6bc>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	613b      	str	r3, [r7, #16]
  return result;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80019ac:	2320      	movs	r3, #32
 80019ae:	e005      	b.n	80019bc <HAL_ADC_ConfigChannel+0x6a8>
 80019b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 021f 	and.w	r2, r3, #31
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	3b1e      	subs	r3, #30
 80019ca:	051b      	lsls	r3, r3, #20
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff fa76 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_ADC_ConfigChannel+0x7dc>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d079      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019e8:	4842      	ldr	r0, [pc, #264]	@ (8001af4 <HAL_ADC_ConfigChannel+0x7e0>)
 80019ea:	f7ff f96f 	bl	8000ccc <LL_ADC_GetCommonPathInternalCh>
 80019ee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a40      	ldr	r2, [pc, #256]	@ (8001af8 <HAL_ADC_ConfigChannel+0x7e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d124      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11e      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001afc <HAL_ADC_ConfigChannel+0x7e8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d164      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4835      	ldr	r0, [pc, #212]	@ (8001af4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001a1e:	f7ff f942 	bl	8000ca6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a22:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_ADC_ConfigChannel+0x7ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	4a36      	ldr	r2, [pc, #216]	@ (8001b04 <HAL_ADC_ConfigChannel+0x7f0>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	3301      	adds	r3, #1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a36:	e002      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a44:	e04a      	b.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b08 <HAL_ADC_ConfigChannel+0x7f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d113      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a26      	ldr	r2, [pc, #152]	@ (8001afc <HAL_ADC_ConfigChannel+0x7e8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d13a      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4820      	ldr	r0, [pc, #128]	@ (8001af4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001a72:	f7ff f918 	bl	8000ca6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a76:	e031      	b.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <HAL_ADC_ConfigChannel+0x7f8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d113      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_ADC_ConfigChannel+0x7e8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d121      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001aa4:	f7ff f8ff 	bl	8000ca6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001aa8:	e018      	b.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_ADC_ConfigChannel+0x7fc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d113      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_ADC_ConfigChannel+0x7e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00e      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f910 	bl	8000ce8 <LL_ADC_EnableChannelVDDcore>
 8001ac8:	e008      	b.n	8001adc <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ae4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	37d8      	adds	r7, #216	@ 0xd8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	80080000 	.word	0x80080000
 8001af4:	42028300 	.word	0x42028300
 8001af8:	c3210000 	.word	0xc3210000
 8001afc:	42028000 	.word	0x42028000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	053e2d63 	.word	0x053e2d63
 8001b08:	88600004 	.word	0x88600004
 8001b0c:	c7520000 	.word	0xc7520000
 8001b10:	99200040 	.word	0x99200040

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff6a 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c56:	f7ff ff81 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001c5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	6978      	ldr	r0, [r7, #20]
 8001c62:	f7ff ffb3 	bl	8001bcc <NVIC_EncodePriority>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff82 	bl	8001b78 <__NVIC_SetPriority>
}
 8001c74:	bf00      	nop
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00d      	b.n	8001cae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_SYSTICK_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_SYSTICK_Config+0x40>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_SYSTICK_Config+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_SYSTICK_Config+0x40>)
 8001ca6:	f043 0303 	orr.w	r3, r3, #3
 8001caa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d844      	bhi.n	8001d58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001cce:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001cf7 	.word	0x08001cf7
 8001cd8:	08001d15 	.word	0x08001d15
 8001cdc:	08001d37 	.word	0x08001d37
 8001ce0:	08001d59 	.word	0x08001d59
 8001ce4:	08001ce9 	.word	0x08001ce9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6013      	str	r3, [r2, #0]
      break;
 8001cf4:	e031      	b.n	8001d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d08:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d0a:	f023 030c 	bic.w	r3, r3, #12
 8001d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d12:	e022      	b.n	8001d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d14:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a13      	ldr	r2, [pc, #76]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d26:	f023 030c 	bic.w	r3, r3, #12
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d34:	e011      	b.n	8001d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d48:	f023 030c 	bic.w	r3, r3, #12
 8001d4c:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d56:	e000      	b.n	8001d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001d58:	bf00      	nop
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010
 8001d6c:	44020c00 	.word	0x44020c00

08001d70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001d82:	2304      	movs	r3, #4
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e01e      	b.n	8001dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d00f      	beq.n	8001dba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d80f      	bhi.n	8001dc0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d003      	beq.n	8001db4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001dac:	e008      	b.n	8001dc0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
        break;
 8001db2:	e008      	b.n	8001dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001db4:	2301      	movs	r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
        break;
 8001db8:	e005      	b.n	8001dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	607b      	str	r3, [r7, #4]
        break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
        break;
 8001dc4:	bf00      	nop
    }
  }
  return systick_source;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e010 	.word	0xe000e010
 8001dd8:	44020c00 	.word	0x44020c00

08001ddc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e014      	b.n	8001e18 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fcc8 	bl	8000794 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_DAC_ConfigChannel+0x1e>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e19a      	b.n	8002178 <HAL_DAC_ConfigChannel+0x358>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	795b      	ldrb	r3, [r3, #5]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DAC_ConfigChannel+0x2e>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e194      	b.n	8002178 <HAL_DAC_ConfigChannel+0x358>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2202      	movs	r2, #2
 8001e58:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d17a      	bne.n	8001f58 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001e62:	f7fe fedd 	bl	8000c20 <HAL_GetTick>
 8001e66:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d13d      	bne.n	8001eea <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e6e:	e018      	b.n	8001ea2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e70:	f7fe fed6 	bl	8000c20 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d911      	bls.n	8001ea2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f043 0208 	orr.w	r2, r3, #8
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e16a      	b.n	8002178 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1df      	bne.n	8001e70 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	6a12      	ldr	r2, [r2, #32]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eba:	e020      	b.n	8001efe <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ebc:	f7fe feb0 	bl	8000c20 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d90f      	bls.n	8001eea <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da0a      	bge.n	8001eea <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f043 0208 	orr.w	r2, r3, #8
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e146      	b.n	8002178 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dbe3      	blt.n	8001ebc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	6a12      	ldr	r2, [r2, #32]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	ea02 0103 	and.w	r1, r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	21ff      	movs	r1, #255	@ 0xff
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	ea02 0103 	and.w	r1, r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d11d      	bne.n	8001f9c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	221f      	movs	r2, #31
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f78:	4013      	ands	r3, r2
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f90:	4313      	orrs	r3, r2
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2207      	movs	r2, #7
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8001fb8:	4b71      	ldr	r3, [pc, #452]	@ (8002180 <HAL_DAC_ConfigChannel+0x360>)
 8001fba:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	d116      	bne.n	8001ff8 <HAL_DAC_ConfigChannel+0x1d8>
  {
    if ((Channel == DAC_CHANNEL_1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d113      	bne.n	8001ff8 <HAL_DAC_ConfigChannel+0x1d8>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d003      	beq.n	8001fe0 <HAL_DAC_ConfigChannel+0x1c0>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d10b      	bne.n	8001ff8 <HAL_DAC_ConfigChannel+0x1d8>
    {
      /* Update return status */
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_DAC_ConfigChannel+0x1e6>
  {
    connectOnChip = 0x00000000UL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	e00f      	b.n	8002026 <HAL_DAC_ConfigChannel+0x206>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d102      	bne.n	8002014 <HAL_DAC_ConfigChannel+0x1f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
 8002012:	e008      	b.n	8002026 <HAL_DAC_ConfigChannel+0x206>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_DAC_ConfigChannel+0x202>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	e001      	b.n	8002026 <HAL_DAC_ConfigChannel+0x206>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	4313      	orrs	r3, r2
 8002034:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002048:	4013      	ands	r3, r2
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	791b      	ldrb	r3, [r3, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d102      	bne.n	800205a <HAL_DAC_ConfigChannel+0x23a>
 8002054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002058:	e000      	b.n	800205c <HAL_DAC_ConfigChannel+0x23c>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	4313      	orrs	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002074:	4013      	ands	r3, r2
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	795b      	ldrb	r3, [r3, #5]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_DAC_ConfigChannel+0x266>
 8002080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002084:	e000      	b.n	8002088 <HAL_DAC_ConfigChannel+0x268>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	4313      	orrs	r3, r2
 800208c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002090:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d114      	bne.n	80020c8 <HAL_DAC_ConfigChannel+0x2a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800209e:	f001 f90b 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80020a2:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4a37      	ldr	r2, [pc, #220]	@ (8002184 <HAL_DAC_ConfigChannel+0x364>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d904      	bls.n	80020b6 <HAL_DAC_ConfigChannel+0x296>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b4:	e00f      	b.n	80020d6 <HAL_DAC_ConfigChannel+0x2b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	4a33      	ldr	r2, [pc, #204]	@ (8002188 <HAL_DAC_ConfigChannel+0x368>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d90a      	bls.n	80020d4 <HAL_DAC_ConfigChannel+0x2b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80020be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c6:	e006      	b.n	80020d6 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ce:	4313      	orrs	r3, r2
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020d2:	e000      	b.n	80020d6 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80020d4:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e4:	4313      	orrs	r3, r2
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002128:	4013      	ands	r3, r2
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002140:	4313      	orrs	r3, r2
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800214a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	22c0      	movs	r2, #192	@ 0xc0
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002174:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002178:	4618      	mov	r0, r3
 800217a:	3730      	adds	r7, #48	@ 0x30
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	08fff80e 	.word	0x08fff80e
 8002184:	09896800 	.word	0x09896800
 8002188:	04c4b400 	.word	0x04c4b400

0800218c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800219a:	e136      	b.n	800240a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8128 	beq.w	8002404 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x38>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d125      	bne.n	8002210 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	6979      	ldr	r1, [r7, #20]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d00b      	beq.n	8002264 <HAL_GPIO_Init+0xd8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002258:	2b11      	cmp	r3, #17
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b12      	cmp	r3, #18
 8002262:	d130      	bne.n	80022c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800229a:	2201      	movs	r2, #1
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4013      	ands	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 0201 	and.w	r2, r3, #1
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d017      	beq.n	80022fe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4013      	ands	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07c      	beq.n	8002404 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800230a:	4a47      	ldr	r2, [pc, #284]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3318      	adds	r3, #24
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4013      	ands	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0a9a      	lsrs	r2, r3, #10
 8002332:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <HAL_GPIO_Init+0x2a0>)
 8002334:	4013      	ands	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	00d2      	lsls	r2, r2, #3
 800233e:	4093      	lsls	r3, r2
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002346:	4938      	ldr	r1, [pc, #224]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3318      	adds	r3, #24
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002378:	4a2b      	ldr	r2, [pc, #172]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800237e:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4013      	ands	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 80023aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80023ce:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 80023d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_GPIO_Init+0x29c>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	3301      	adds	r3, #1
 8002408:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f aec1 	bne.w	800219c <HAL_GPIO_Init+0x10>
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	44022000 	.word	0x44022000
 800242c:	002f7f7f 	.word	0x002f7f7f

08002430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
 800243c:	4613      	mov	r3, r2
 800243e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800244c:	e002      	b.n	8002454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_ICACHE_Enable+0x1c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a04      	ldr	r2, [pc, #16]	@ (800247c <HAL_ICACHE_Enable+0x1c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40030400 	.word	0x40030400

08002480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f000 bc28 	b.w	8002ce4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002494:	4b94      	ldr	r3, [pc, #592]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 0318 	and.w	r3, r3, #24
 800249c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800249e:	4b92      	ldr	r3, [pc, #584]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d05b      	beq.n	800256c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b18      	cmp	r3, #24
 80024be:	d114      	bne.n	80024ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d111      	bne.n	80024ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f000 bc08 	b.w	8002ce4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80024d4:	4b84      	ldr	r3, [pc, #528]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	4981      	ldr	r1, [pc, #516]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80024e8:	e040      	b.n	800256c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024f2:	4b7d      	ldr	r3, [pc, #500]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7c      	ldr	r2, [pc, #496]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fb8f 	bl	8000c20 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002506:	f7fe fb8b 	bl	8000c20 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e3e5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002518:	4b73      	ldr	r3, [pc, #460]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002524:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	496d      	ldr	r1, [pc, #436]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002534:	4313      	orrs	r3, r2
 8002536:	618b      	str	r3, [r1, #24]
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800253a:	4b6b      	ldr	r3, [pc, #428]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6a      	ldr	r2, [pc, #424]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fb6b 	bl	8000c20 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800254e:	f7fe fb67 	bl	8000c20 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e3c1      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002560:	4b61      	ldr	r3, [pc, #388]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a0 	beq.w	80026ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x10c>
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b18      	cmp	r3, #24
 8002584:	d109      	bne.n	800259a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 8092 	bne.w	80026ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e3a4      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x132>
 80025a4:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e058      	b.n	8002664 <HAL_RCC_OscConfig+0x1e4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d112      	bne.n	80025e0 <HAL_RCC_OscConfig+0x160>
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a4a      	ldr	r2, [pc, #296]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b48      	ldr	r3, [pc, #288]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a47      	ldr	r2, [pc, #284]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b45      	ldr	r3, [pc, #276]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e041      	b.n	8002664 <HAL_RCC_OscConfig+0x1e4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e8:	d112      	bne.n	8002610 <HAL_RCC_OscConfig+0x190>
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3e      	ldr	r2, [pc, #248]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b3c      	ldr	r3, [pc, #240]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80025fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b39      	ldr	r3, [pc, #228]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a38      	ldr	r2, [pc, #224]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e029      	b.n	8002664 <HAL_RCC_OscConfig+0x1e4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002618:	d112      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
 800261a:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a32      	ldr	r2, [pc, #200]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b30      	ldr	r3, [pc, #192]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2f      	ldr	r2, [pc, #188]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800262c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2c      	ldr	r2, [pc, #176]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e011      	b.n	8002664 <HAL_RCC_OscConfig+0x1e4>
 8002640:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 800265e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fad8 	bl	8000c20 <HAL_GetTick>
 8002670:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002674:	f7fe fad4 	bl	8000c20 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e32e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x1f4>
 8002692:	e012      	b.n	80026ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fac4 	bl	8000c20 <HAL_GetTick>
 8002698:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800269c:	f7fe fac0 	bl	8000c20 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e31a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ae:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <HAL_RCC_OscConfig+0x268>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 809a 	beq.w	80027fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x25a>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b18      	cmp	r3, #24
 80026d2:	d149      	bne.n	8002768 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d146      	bne.n	8002768 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e2fe      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
 80026e6:	bf00      	nop
 80026e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80026f2:	4b9a      	ldr	r3, [pc, #616]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0218 	and.w	r2, r3, #24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d014      	beq.n	800272c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002702:	4b96      	ldr	r3, [pc, #600]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0218 	bic.w	r2, r3, #24
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4993      	ldr	r1, [pc, #588]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002714:	f000 fdd0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002718:	4b91      	ldr	r3, [pc, #580]	@ (8002960 <HAL_RCC_OscConfig+0x4e0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe f9f5 	bl	8000b0c <HAL_InitTick>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e2db      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fa78 	bl	8000c20 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002734:	f7fe fa74 	bl	8000c20 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2ce      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002746:	4b85      	ldr	r3, [pc, #532]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002752:	4b82      	ldr	r3, [pc, #520]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	497e      	ldr	r1, [pc, #504]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002766:	e049      	b.n	80027fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02c      	beq.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002770:	4b7a      	ldr	r3, [pc, #488]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0218 	bic.w	r2, r3, #24
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4977      	ldr	r1, [pc, #476]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002782:	4b76      	ldr	r3, [pc, #472]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a75      	ldr	r2, [pc, #468]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fa47 	bl	8000c20 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002796:	f7fe fa43 	bl	8000c20 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e29d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	4b6c      	ldr	r3, [pc, #432]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80027b4:	4b69      	ldr	r3, [pc, #420]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	4966      	ldr	r1, [pc, #408]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	610b      	str	r3, [r1, #16]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b64      	ldr	r3, [pc, #400]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a63      	ldr	r2, [pc, #396]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fa23 	bl	8000c20 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027de:	f7fe fa1f 	bl	8000c20 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e279      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	4b5a      	ldr	r3, [pc, #360]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03c      	beq.n	8002882 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	4b52      	ldr	r3, [pc, #328]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002816:	4a51      	ldr	r2, [pc, #324]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002818:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800281c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe f9fe 	bl	8000c20 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002828:	f7fe f9fa 	bl	8000c20 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e254      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800283a:	4b48      	ldr	r3, [pc, #288]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800283c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x3a8>
 8002848:	e01b      	b.n	8002882 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	4b44      	ldr	r3, [pc, #272]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002852:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe f9e1 	bl	8000c20 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002862:	f7fe f9dd 	bl	8000c20 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e237      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80d2 	beq.w	8002a34 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x4e4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d118      	bne.n	80028ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_OscConfig+0x4e4>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_RCC_OscConfig+0x4e4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a8:	f7fe f9ba 	bl	8000c20 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7fe f9b6 	bl	8000c20 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e210      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028c2:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_RCC_OscConfig+0x4e4>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x468>
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80028d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e6:	e074      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_RCC_OscConfig+0x4a2>
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f6:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002900:	4b16      	ldr	r3, [pc, #88]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002906:	4a15      	ldr	r2, [pc, #84]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002908:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800290c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002916:	4a11      	ldr	r2, [pc, #68]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002920:	e057      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d11e      	bne.n	8002968 <HAL_RCC_OscConfig+0x4e8>
 800292a:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a06      	ldr	r2, [pc, #24]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 800294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002950:	4a02      	ldr	r2, [pc, #8]	@ (800295c <HAL_RCC_OscConfig+0x4dc>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800295a:	e03a      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
 800295c:	44020c00 	.word	0x44020c00
 8002960:	20000004 	.word	0x20000004
 8002964:	44020800 	.word	0x44020800
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b85      	cmp	r3, #133	@ 0x85
 800296e:	d118      	bne.n	80029a2 <HAL_RCC_OscConfig+0x522>
 8002970:	4ba2      	ldr	r3, [pc, #648]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002976:	4aa1      	ldr	r2, [pc, #644]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002980:	4b9e      	ldr	r3, [pc, #632]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002986:	4a9d      	ldr	r2, [pc, #628]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800298c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002990:	4b9a      	ldr	r3, [pc, #616]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002996:	4a99      	ldr	r2, [pc, #612]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a0:	e017      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
 80029a2:	4b96      	ldr	r3, [pc, #600]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a8:	4a94      	ldr	r2, [pc, #592]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029b2:	4b92      	ldr	r3, [pc, #584]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b8:	4a90      	ldr	r2, [pc, #576]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029c2:	4b8e      	ldr	r3, [pc, #568]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029c8:	4a8c      	ldr	r2, [pc, #560]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe f921 	bl	8000c20 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe f91d 	bl	8000c20 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e175      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f8:	4b80      	ldr	r3, [pc, #512]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ed      	beq.n	80029e2 <HAL_RCC_OscConfig+0x562>
 8002a06:	e015      	b.n	8002a34 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe f90a 	bl	8000c20 <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe f906 	bl	8000c20 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e15e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a26:	4b75      	ldr	r3, [pc, #468]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ed      	bne.n	8002a10 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d036      	beq.n	8002aae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d019      	beq.n	8002a7c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a48:	4b6c      	ldr	r3, [pc, #432]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe f8e4 	bl	8000c20 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a5c:	f7fe f8e0 	bl	8000c20 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e13a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x5dc>
 8002a7a:	e018      	b.n	8002aae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5e      	ldr	r2, [pc, #376]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f8ca 	bl	8000c20 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a90:	f7fe f8c6 	bl	8000c20 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e120      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002aa2:	4b56      	ldr	r3, [pc, #344]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8115 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b18      	cmp	r3, #24
 8002abc:	f000 80af 	beq.w	8002c1e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 8086 	bne.w	8002bd6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002aca:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002ad0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe f8a3 	bl	8000c20 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ade:	f7fe f89f 	bl	8000c20 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0f9      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002af0:	4b42      	ldr	r3, [pc, #264]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002afc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b04:	f023 0303 	bic.w	r3, r3, #3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b10:	0212      	lsls	r2, r2, #8
 8002b12:	430a      	orrs	r2, r1
 8002b14:	4939      	ldr	r1, [pc, #228]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	025b      	lsls	r3, r3, #9
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	3b01      	subs	r3, #1
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b4a:	492c      	ldr	r1, [pc, #176]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b50:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b56:	f023 0310 	bic.w	r3, r3, #16
 8002b5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b60:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b66:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b6c:	f043 0310 	orr.w	r3, r3, #16
 8002b70:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002b72:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	f023 020c 	bic.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	491f      	ldr	r1, [pc, #124]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	f023 0220 	bic.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	491a      	ldr	r1, [pc, #104]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b96:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002ba2:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe f837 	bl	8000c20 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe f833 	bl	8000c20 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e08d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x736>
 8002bd4:	e085      	b.n	8002ce2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_RCC_OscConfig+0x77c>)
 8002bdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f81d 	bl	8000c20 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002bea:	f7fe f819 	bl	8000c20 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d903      	bls.n	8002c00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e073      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
 8002bfc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c00:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ee      	bne.n	8002bea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002c0c:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	4a36      	ldr	r2, [pc, #216]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	6293      	str	r3, [r2, #40]	@ 0x28
 8002c1c:	e061      	b.n	8002ce2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c1e:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c24:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c28:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d031      	beq.n	8002c96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d12a      	bne.n	8002c96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d122      	bne.n	8002c96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d11a      	bne.n	8002c96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d111      	bne.n	8002c96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d108      	bne.n	8002c96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e024      	b.n	8002ce4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d01a      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002cac:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002cb2:	f023 0310 	bic.w	r3, r3, #16
 8002cb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ffb2 	bl	8000c20 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002cbe:	bf00      	nop
 8002cc0:	f7fd ffae 	bl	8000c20 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d0f9      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd0:	4a06      	ldr	r2, [pc, #24]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_RCC_OscConfig+0x86c>)
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	44020c00 	.word	0x44020c00

08002cf0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e19e      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b83      	ldr	r3, [pc, #524]	@ (8002f14 <HAL_RCC_ClockConfig+0x224>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b80      	ldr	r3, [pc, #512]	@ (8002f14 <HAL_RCC_ClockConfig+0x224>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	497e      	ldr	r1, [pc, #504]	@ (8002f14 <HAL_RCC_ClockConfig+0x224>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_ClockConfig+0x224>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e186      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	4b74      	ldr	r3, [pc, #464]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d909      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d52:	4b71      	ldr	r3, [pc, #452]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	496d      	ldr	r1, [pc, #436]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d012      	beq.n	8002d98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	4b68      	ldr	r3, [pc, #416]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d909      	bls.n	8002d98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d84:	4b64      	ldr	r3, [pc, #400]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4961      	ldr	r1, [pc, #388]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d908      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002db4:	4b58      	ldr	r3, [pc, #352]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4955      	ldr	r1, [pc, #340]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b50      	ldr	r3, [pc, #320]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d908      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002de2:	4b4d      	ldr	r3, [pc, #308]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	494a      	ldr	r1, [pc, #296]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8093 	beq.w	8002f28 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e0a:	4b43      	ldr	r3, [pc, #268]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e113      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	4b3d      	ldr	r3, [pc, #244]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d115      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e107      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e3a:	4b37      	ldr	r3, [pc, #220]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0fb      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4a:	4b33      	ldr	r3, [pc, #204]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0f3      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	492c      	ldr	r1, [pc, #176]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fd fed8 	bl	8000c20 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d112      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd fed0 	bl	8000c20 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0d7      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e92:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0318 	and.w	r3, r3, #24
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	d1ee      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x18c>
 8002e9e:	e043      	b.n	8002f28 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f7fd feb9 	bl	8000c20 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0c0      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f003 0318 	and.w	r3, r3, #24
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
 8002ecc:	e02c      	b.n	8002f28 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d122      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fd fea2 	bl	8000c20 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0a9      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_RCC_ClockConfig+0x228>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0318 	and.w	r3, r3, #24
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
 8002efa:	e015      	b.n	8002f28 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fe90 	bl	8000c20 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d906      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e097      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
 8002f12:	bf00      	nop
 8002f14:	40022000 	.word	0x40022000
 8002f18:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 0318 	and.w	r3, r3, #24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e9      	bne.n	8002efc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b44      	ldr	r3, [pc, #272]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d208      	bcs.n	8002f56 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002f44:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 020f 	bic.w	r2, r3, #15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	493e      	ldr	r1, [pc, #248]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f56:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <HAL_RCC_ClockConfig+0x360>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d210      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f64:	4b3a      	ldr	r3, [pc, #232]	@ (8003050 <HAL_RCC_ClockConfig+0x360>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 020f 	bic.w	r2, r3, #15
 8002f6c:	4938      	ldr	r1, [pc, #224]	@ (8003050 <HAL_RCC_ClockConfig+0x360>)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f74:	4b36      	ldr	r3, [pc, #216]	@ (8003050 <HAL_RCC_ClockConfig+0x360>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e05d      	b.n	8003042 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4927      	ldr	r1, [pc, #156]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	4b21      	ldr	r3, [pc, #132]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d209      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	491a      	ldr	r1, [pc, #104]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003000:	429a      	cmp	r2, r3
 8003002:	d209      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	490e      	ldr	r1, [pc, #56]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003018:	f000 f822 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCC_ClockConfig+0x35c>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490b      	ldr	r1, [pc, #44]	@ (8003054 <HAL_RCC_ClockConfig+0x364>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <HAL_RCC_ClockConfig+0x368>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_RCC_ClockConfig+0x36c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fd68 	bl	8000b0c <HAL_InitTick>
 800303c:	4603      	mov	r3, r0
 800303e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003040:	7afb      	ldrb	r3, [r7, #11]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	44020c00 	.word	0x44020c00
 8003050:	40022000 	.word	0x40022000
 8003054:	08004770 	.word	0x08004770
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003066:	4b8c      	ldr	r3, [pc, #560]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0318 	and.w	r3, r3, #24
 800306e:	2b08      	cmp	r3, #8
 8003070:	d102      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003072:	4b8a      	ldr	r3, [pc, #552]	@ (800329c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e107      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003078:	4b87      	ldr	r3, [pc, #540]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 0318 	and.w	r3, r3, #24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d112      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003084:	4b84      	ldr	r3, [pc, #528]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003090:	4b81      	ldr	r3, [pc, #516]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	4a81      	ldr	r2, [pc, #516]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x240>)
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e0f1      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80030a4:	4b7e      	ldr	r3, [pc, #504]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e0ee      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0318 	and.w	r3, r3, #24
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b6:	4b7b      	ldr	r3, [pc, #492]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x244>)
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e0e5      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 0318 	and.w	r3, r3, #24
 80030c4:	2b18      	cmp	r3, #24
 80030c6:	f040 80dd 	bne.w	8003284 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030ca:	4b73      	ldr	r3, [pc, #460]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80030d4:	4b70      	ldr	r3, [pc, #448]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80030e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003104:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80b7 	beq.w	800327e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xbe>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d056      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x16a>
 800311c:	e077      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800311e:	4b5e      	ldr	r3, [pc, #376]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02d      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800312a:	4b5b      	ldr	r3, [pc, #364]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	4a5a      	ldr	r2, [pc, #360]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003154:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	ed97 6a02 	vldr	s12, [r7, #8]
 8003168:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x248>
 800316c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003170:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003178:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800317c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003180:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003184:	e065      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x24c>
 8003194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003198:	4b3f      	ldr	r3, [pc, #252]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 800319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x248>
 80031b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031c8:	e043      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80032b0 <HAL_RCC_GetSysClockFreq+0x250>
 80031d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x248>
 80031f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003200:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003208:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800320c:	e021      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x254>
 800321c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	ed97 6a02 	vldr	s12, [r7, #8]
 8003234:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003238:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800323c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003244:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003250:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x238>)
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	0a5b      	lsrs	r3, r3, #9
 8003258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325c:	3301      	adds	r3, #1
 800325e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326a:	edd7 6a06 	vldr	s13, [r7, #24]
 800326e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003276:	ee17 3a90 	vmov	r3, s15
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	e004      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e001      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003286:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003288:	69fb      	ldr	r3, [r7, #28]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	44020c00 	.word	0x44020c00
 800329c:	003d0900 	.word	0x003d0900
 80032a0:	03d09000 	.word	0x03d09000
 80032a4:	017d7840 	.word	0x017d7840
 80032a8:	46000000 	.word	0x46000000
 80032ac:	4c742400 	.word	0x4c742400
 80032b0:	4bbebc20 	.word	0x4bbebc20
 80032b4:	4a742400 	.word	0x4a742400

080032b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032bc:	f7ff fed0 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032ca:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80032cc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032ce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a05      	ldr	r2, [pc, #20]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x34>)
 80032d8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	44020c00 	.word	0x44020c00
 80032e8:	08004770 	.word	0x08004770
 80032ec:	20000000 	.word	0x20000000

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b0aa      	sub	sp, #168	@ 0xa8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003302:	2300      	movs	r3, #0
 8003304:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003308:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003314:	2500      	movs	r5, #0
 8003316:	ea54 0305 	orrs.w	r3, r4, r5
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800331c:	4bb8      	ldr	r3, [pc, #736]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800331e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003322:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003326:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	4ab4      	ldr	r2, [pc, #720]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800332e:	430b      	orrs	r3, r1
 8003330:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f002 0801 	and.w	r8, r2, #1
 8003340:	f04f 0900 	mov.w	r9, #0
 8003344:	ea58 0309 	orrs.w	r3, r8, r9
 8003348:	d038      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800334a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003350:	2b05      	cmp	r3, #5
 8003352:	d819      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003354:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003391 	.word	0x08003391
 8003360:	08003375 	.word	0x08003375
 8003364:	08003389 	.word	0x08003389
 8003368:	08003391 	.word	0x08003391
 800336c:	08003391 	.word	0x08003391
 8003370:	08003391 	.word	0x08003391
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003374:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003378:	3308      	adds	r3, #8
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fddc 	bl	8003f38 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800339a:	4b99      	ldr	r3, [pc, #612]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800339c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033a0:	f023 0107 	bic.w	r1, r3, #7
 80033a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033aa:	4a95      	ldr	r2, [pc, #596]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f002 0a02 	and.w	sl, r2, #2
 80033c8:	f04f 0b00 	mov.w	fp, #0
 80033cc:	ea5a 030b 	orrs.w	r3, sl, fp
 80033d0:	d03c      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80033d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	2b28      	cmp	r3, #40	@ 0x28
 80033da:	d01b      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80033dc:	2b28      	cmp	r3, #40	@ 0x28
 80033de:	d815      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d019      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d811      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033e8:	2b18      	cmp	r3, #24
 80033ea:	d017      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80033ec:	2b18      	cmp	r3, #24
 80033ee:	d80d      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d109      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fc:	3308      	adds	r3, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fd9a 	bl	8003f38 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800340a:	e00a      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003412:	e006      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003414:	bf00      	nop
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003418:	bf00      	nop
 800341a:	e002      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800342a:	4b75      	ldr	r3, [pc, #468]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800342c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003430:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003434:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	4a71      	ldr	r2, [pc, #452]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800343c:	430b      	orrs	r3, r1
 800343e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003442:	e003      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003448:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800344c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f002 0304 	and.w	r3, r2, #4
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003462:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003466:	460b      	mov	r3, r1
 8003468:	4313      	orrs	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800346c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003476:	d01e      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003478:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800347c:	d817      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800347e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003482:	d01a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003488:	d811      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800348a:	2bc0      	cmp	r3, #192	@ 0xc0
 800348c:	d017      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800348e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003490:	d80d      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d109      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800349a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800349e:	3308      	adds	r3, #8
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd49 	bl	8003f38 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80034ac:	e00a      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80034b6:	bf00      	nop
 80034b8:	e004      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80034c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80034cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034d2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034ea:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003504:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d043      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800350e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003518:	d021      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800351a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800351e:	d81a      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003524:	d01d      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800352a:	d814      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800352c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003530:	d019      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003532:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003536:	d80e      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800353c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003540:	d109      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003542:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003546:	3308      	adds	r3, #8
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fcf5 	bl	8003f38 <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003554:	e00a      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800356a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10c      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003574:	4b22      	ldr	r3, [pc, #136]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800357a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800357e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	4a1e      	ldr	r2, [pc, #120]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003586:	430b      	orrs	r3, r1
 8003588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003592:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003596:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035a4:	2300      	movs	r3, #0
 80035a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d03e      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80035b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035bc:	d01b      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80035be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035c2:	d814      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80035c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035c8:	d017      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80035ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ce:	d80e      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d017      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d109      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035de:	3308      	adds	r3, #8
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fca9 	bl	8003f38 <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80035ec:	e00b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035f4:	e007      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035f6:	bf00      	nop
 80035f8:	e005      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035fa:	bf00      	nop
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80035fe:	bf00      	nop
 8003600:	44020c00 	.word	0x44020c00
        break;
 8003604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003606:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800360e:	4ba5      	ldr	r3, [pc, #660]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003610:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003614:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	4aa1      	ldr	r2, [pc, #644]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003620:	430b      	orrs	r3, r1
 8003622:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800362c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800363c:	673b      	str	r3, [r7, #112]	@ 0x70
 800363e:	2300      	movs	r3, #0
 8003640:	677b      	str	r3, [r7, #116]	@ 0x74
 8003642:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003646:	460b      	mov	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	d03b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800364c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003656:	d01b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003658:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800365c:	d814      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800365e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003662:	d017      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003664:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003668:	d80e      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d014      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800366e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003672:	d109      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003674:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003678:	3308      	adds	r3, #8
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fc5c 	bl	8003f38 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003690:	bf00      	nop
 8003692:	e002      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80036a2:	4b80      	ldr	r3, [pc, #512]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036a8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80036ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b2:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036ba:	e003      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80036c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d2:	2300      	movs	r3, #0
 80036d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036da:	460b      	mov	r3, r1
 80036dc:	4313      	orrs	r3, r2
 80036de:	d033      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80036e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ea:	d015      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80036ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f0:	d80e      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036fa:	d109      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003700:	3308      	adds	r3, #8
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fc18 	bl	8003f38 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003726:	4b5f      	ldr	r3, [pc, #380]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800372c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003730:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003738:	430b      	orrs	r3, r1
 800373a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003744:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003748:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	2100      	movs	r1, #0
 8003752:	6639      	str	r1, [r7, #96]	@ 0x60
 8003754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003758:	667b      	str	r3, [r7, #100]	@ 0x64
 800375a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d033      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003774:	d80e      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800377a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800377e:	d109      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003780:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003784:	3308      	adds	r3, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fbd6 	bl	8003f38 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003792:	e006      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800379a:	e002      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80037aa:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80037b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ba:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037c2:	e003      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	2100      	movs	r1, #0
 80037d6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80037e8:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a2d      	ldr	r2, [pc, #180]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037f2:	61d3      	str	r3, [r2, #28]
 80037f4:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037f6:	69d9      	ldr	r1, [r3, #28]
 80037f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003800:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003802:	430b      	orrs	r3, r1
 8003804:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003806:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003812:	653b      	str	r3, [r7, #80]	@ 0x50
 8003814:	2300      	movs	r3, #0
 8003816:	657b      	str	r3, [r7, #84]	@ 0x54
 8003818:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d046      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800382c:	d021      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800382e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003832:	d81a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003838:	d01d      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383e:	d814      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003844:	d019      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800384a:	d80e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d016      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003854:	d109      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003856:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800385a:	3308      	adds	r3, #8
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fb6b 	bl	8003f38 <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003888:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800388a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800388e:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003892:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	4a02      	ldr	r2, [pc, #8]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800389a:	430b      	orrs	r3, r1
 800389c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038a2:	bf00      	nop
 80038a4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80038bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038be:	2300      	movs	r3, #0
 80038c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d043      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80038cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038d6:	d021      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80038d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038dc:	d81a      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e2:	d01d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80038e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e8:	d814      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ee:	d019      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80038f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f4:	d80e      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fe:	d109      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003900:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003904:	3308      	adds	r3, #8
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fb16 	bl	8003f38 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003912:	e00a      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800391c:	bf00      	nop
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003932:	4bb6      	ldr	r3, [pc, #728]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003934:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003938:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800393c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	4ab2      	ldr	r2, [pc, #712]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003944:	430b      	orrs	r3, r1
 8003946:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800394a:	e003      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003950:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003954:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003960:	643b      	str	r3, [r7, #64]	@ 0x40
 8003962:	2300      	movs	r3, #0
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
 8003966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d030      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003970:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003976:	2b05      	cmp	r3, #5
 8003978:	d80f      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800397a:	2b03      	cmp	r3, #3
 800397c:	d211      	bcs.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800397e:	2b01      	cmp	r3, #1
 8003980:	d911      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003982:	2b02      	cmp	r3, #2
 8003984:	d109      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003986:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800398a:	3308      	adds	r3, #8
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fad3 	bl	8003f38 <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039a0:	e002      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80039a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10c      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80039b0:	4b96      	ldr	r3, [pc, #600]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039b6:	f023 0107 	bic.w	r1, r3, #7
 80039ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c0:	4a92      	ldr	r2, [pc, #584]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039c8:	e003      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80039d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	2100      	movs	r1, #0
 80039dc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d022      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80039ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d005      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003a12:	4b7e      	ldr	r3, [pc, #504]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a18:	f023 0108 	bic.w	r1, r3, #8
 8003a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a22:	4a7a      	ldr	r2, [pc, #488]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a2a:	e003      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a30:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a42:	2300      	movs	r3, #0
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f000 80b0 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a52:	4b6f      	ldr	r3, [pc, #444]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	4a6e      	ldr	r2, [pc, #440]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5e:	f7fd f8df 	bl	8000c20 <HAL_GetTick>
 8003a62:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a66:	e00b      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd f8da 	bl	8000c20 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d903      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a7e:	e005      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a80:	4b63      	ldr	r3, [pc, #396]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ed      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003a8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 808a 	bne.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a96:	4b5d      	ldr	r3, [pc, #372]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003aa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d01b      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aba:	4b54      	ldr	r3, [pc, #336]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac8:	4b50      	ldr	r3, [pc, #320]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ace:	4a4f      	ldr	r2, [pc, #316]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ade:	4a4b      	ldr	r2, [pc, #300]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae8:	4a48      	ldr	r2, [pc, #288]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d019      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd f88f 	bl	8000c20 <HAL_GetTick>
 8003b02:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e00d      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd f88a 	bl	8000c20 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d903      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003b22:	e006      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b24:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ea      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003b32:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d132      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b48:	d10f      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003b62:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	61d3      	str	r3, [r2, #28]
 8003b68:	e005      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003b6a:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a27      	ldr	r2, [pc, #156]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b74:	61d3      	str	r3, [r2, #28]
 8003b76:	4b25      	ldr	r3, [pc, #148]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b7c:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b86:	4b21      	ldr	r3, [pc, #132]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b88:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b96:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ba4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d038      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d014      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d80e      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d012      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d80a      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d106      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bec:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	4a06      	ldr	r2, [pc, #24]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bf8:	e00d      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c00:	e009      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003c02:	bf00      	nop
 8003c04:	e007      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003c06:	bf00      	nop
 8003c08:	e005      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003c0a:	bf00      	nop
 8003c0c:	44020c00 	.word	0x44020c00
 8003c10:	44020800 	.word	0x44020800
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003c1e:	4bb5      	ldr	r3, [pc, #724]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2e:	49b1      	ldr	r1, [pc, #708]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003c36:	e003      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c3c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d81d      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003c66:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c81 	.word	0x08003c81
 8003c70:	08003c8f 	.word	0x08003c8f
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c80:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	4a9b      	ldr	r2, [pc, #620]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e00e      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c92:	3308      	adds	r3, #8
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f94f 	bl	8003f38 <RCCEx_PLL2_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc4:	498b      	ldr	r1, [pc, #556]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cd2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cec:	460b      	mov	r3, r1
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	d03c      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d01f      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d819      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003d00:	2b18      	cmp	r3, #24
 8003d02:	d01d      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003d04:	2b18      	cmp	r3, #24
 8003d06:	d815      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d007      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d10:	e010      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d12:	4b78      	ldr	r3, [pc, #480]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	4a77      	ldr	r2, [pc, #476]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e010      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d24:	3308      	adds	r3, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f906 	bl	8003f38 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d50:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4966      	ldr	r1, [pc, #408]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d82:	460b      	mov	r3, r1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	d03e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d98:	d819      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d9c:	d01d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003da0:	d815      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003da6:	2b40      	cmp	r3, #64	@ 0x40
 8003da8:	d007      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003daa:	e010      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dac:	4b51      	ldr	r3, [pc, #324]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	4a50      	ldr	r2, [pc, #320]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003db8:	e010      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f8b9 	bl	8003f38 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ddc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003de4:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dea:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df4:	493f      	ldr	r1, [pc, #252]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003dfc:	e003      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e02:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	2100      	movs	r1, #0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d038      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e2c:	d00e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e32:	d815      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3c:	d110      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e4a:	e00e      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e50:	3308      	adds	r3, #8
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f870 	bl	8003f38 <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e82:	491c      	ldr	r1, [pc, #112]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6039      	str	r1, [r7, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d039      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb6:	2b30      	cmp	r3, #48	@ 0x30
 8003eb8:	d01e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003eba:	2b30      	cmp	r3, #48	@ 0x30
 8003ebc:	d815      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d007      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003ec6:	e010      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ed4:	e011      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eda:	3308      	adds	r3, #8
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f82b 	bl	8003f38 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003ee8:	e007      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003ef2:	bf00      	nop
 8003ef4:	44020c00 	.word	0x44020c00
        break;
 8003ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003f02:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f12:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f20:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003f24:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	37a8      	adds	r7, #168	@ 0xa8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop
 8003f34:	44020c00 	.word	0x44020c00

08003f38 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003f40:	4b48      	ldr	r3, [pc, #288]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a47      	ldr	r2, [pc, #284]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003f46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f4c:	f7fc fe68 	bl	8000c20 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f54:	f7fc fe64 	bl	8000c20 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e07a      	b.n	800405c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003f72:	4b3c      	ldr	r3, [pc, #240]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6852      	ldr	r2, [r2, #4]
 8003f86:	0212      	lsls	r2, r2, #8
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4936      	ldr	r1, [pc, #216]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	025b      	lsls	r3, r3, #9
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fc0:	4928      	ldr	r1, [pc, #160]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003fc6:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	f023 020c 	bic.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	4924      	ldr	r1, [pc, #144]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	f023 0220 	bic.w	r2, r3, #32
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	491f      	ldr	r1, [pc, #124]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003fea:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	491c      	ldr	r1, [pc, #112]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004004:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800400c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6a12      	ldr	r2, [r2, #32]
 8004014:	00d2      	lsls	r2, r2, #3
 8004016:	4913      	ldr	r1, [pc, #76]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4a10      	ldr	r2, [pc, #64]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8004022:	f043 0310 	orr.w	r3, r3, #16
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 800402e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004032:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004034:	f7fc fdf4 	bl	8000c20 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800403a:	e008      	b.n	800404e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800403c:	f7fc fdf0 	bl	8000c20 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e006      	b.n	800405c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <RCCEx_PLL2_Config+0x12c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0

}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	44020c00 	.word	0x44020c00

08004068 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0e7      	b.n	800424a <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_SPI_Init+0x2c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d901      	bls.n	8004094 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0da      	b.n	800424a <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb17 	bl	80046c8 <SPI_GetPacketSize>
 800409a:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_SPI_Init+0x42>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d811      	bhi.n	80040ce <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <HAL_SPI_Init+0x1ec>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a67      	ldr	r2, [pc, #412]	@ (8004258 <HAL_SPI_Init+0x1f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_SPI_Init+0x60>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a66      	ldr	r2, [pc, #408]	@ (800425c <HAL_SPI_Init+0x1f4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d104      	bne.n	80040d2 <HAL_SPI_Init+0x6a>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d901      	bls.n	80040d2 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0bb      	b.n	800424a <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fbb4 	bl	8000854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800410e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004118:	d119      	bne.n	800414e <HAL_SPI_Init+0xe6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004122:	d103      	bne.n	800412c <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10c      	bne.n	800414e <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800413c:	d107      	bne.n	800414e <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <HAL_SPI_Init+0x112>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b06      	cmp	r3, #6
 8004160:	d90b      	bls.n	800417a <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	431a      	orrs	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419c:	ea42 0103 	orr.w	r1, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	ea42 0103 	orr.w	r1, r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40013000 	.word	0x40013000
 8004258:	40003800 	.word	0x40003800
 800425c:	40003c00 	.word	0x40003c00

08004260 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3330      	adds	r3, #48	@ 0x30
 8004276:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004278:	f7fc fcd2 	bl	8000c20 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	e172      	b.n	8004574 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_Receive+0x3a>
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e16a      	b.n	8004574 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_SPI_Receive+0x4c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e163      	b.n	8004574 <HAL_SPI_Receive+0x314>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2204      	movs	r2, #4
 80042b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004304:	d108      	bne.n	8004318 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e009      	b.n	800432c <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800432a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	88f9      	ldrh	r1, [r7, #6]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004358:	d107      	bne.n	800436a <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d957      	bls.n	8004422 <HAL_SPI_Receive+0x1c2>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a81      	ldr	r2, [pc, #516]	@ (800457c <HAL_SPI_Receive+0x31c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04b      	beq.n	8004414 <HAL_SPI_Receive+0x1b4>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a7f      	ldr	r2, [pc, #508]	@ (8004580 <HAL_SPI_Receive+0x320>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d046      	beq.n	8004414 <HAL_SPI_Receive+0x1b4>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7e      	ldr	r2, [pc, #504]	@ (8004584 <HAL_SPI_Receive+0x324>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d148      	bne.n	8004422 <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004390:	e040      	b.n	8004414 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	f248 0308 	movw	r3, #32776	@ 0x8008
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d014      	beq.n	80043cc <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80043ca:	e023      	b.n	8004414 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043cc:	f7fc fc28 	bl	8000c20 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d803      	bhi.n	80043e4 <HAL_SPI_Receive+0x184>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d102      	bne.n	80043ea <HAL_SPI_Receive+0x18a>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d114      	bne.n	8004414 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f8cc 	bl	8004588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0af      	b.n	8004574 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1b8      	bne.n	8004392 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004420:	e095      	b.n	800454e <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b07      	cmp	r3, #7
 8004428:	f240 808b 	bls.w	8004542 <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800442c:	e03f      	b.n	80044ae <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d114      	bne.n	8004466 <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	8812      	ldrh	r2, [r2, #0]
 8004444:	b292      	uxth	r2, r2
 8004446:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8004464:	e023      	b.n	80044ae <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004466:	f7fc fbdb 	bl	8000c20 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d803      	bhi.n	800447e <HAL_SPI_Receive+0x21e>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d102      	bne.n	8004484 <HAL_SPI_Receive+0x224>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d114      	bne.n	80044ae <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f87f 	bl	8004588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004490:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e062      	b.n	8004574 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1b9      	bne.n	800442e <HAL_SPI_Receive+0x1ce>
 80044ba:	e048      	b.n	800454e <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d117      	bne.n	80044fa <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80044f8:	e023      	b.n	8004542 <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fa:	f7fc fb91 	bl	8000c20 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d803      	bhi.n	8004512 <HAL_SPI_Receive+0x2b2>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Receive+0x2b8>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f835 	bl	8004588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004524:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e018      	b.n	8004574 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1b6      	bne.n	80044bc <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f81a 	bl	8004588 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8004572:	2300      	movs	r3, #0
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40013000 	.word	0x40013000
 8004580:	40003800 	.word	0x40003800
 8004584:	40003c00 	.word	0x40003c00

08004588 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0208 	orr.w	r2, r2, #8
 80045a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0210 	orr.w	r2, r2, #16
 80045b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80045ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d014      	beq.n	8004622 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00f      	beq.n	8004622 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004608:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0220 	orr.w	r2, r2, #32
 8004620:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d014      	beq.n	8004658 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00f      	beq.n	8004658 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004656:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00f      	beq.n	8004682 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004680:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004692:	f043 0208 	orr.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	3301      	adds	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3307      	adds	r3, #7
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <memset>:
 80046fe:	4402      	add	r2, r0
 8004700:	4603      	mov	r3, r0
 8004702:	4293      	cmp	r3, r2
 8004704:	d100      	bne.n	8004708 <memset+0xa>
 8004706:	4770      	bx	lr
 8004708:	f803 1b01 	strb.w	r1, [r3], #1
 800470c:	e7f9      	b.n	8004702 <memset+0x4>
	...

08004710 <__libc_init_array>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	4d0d      	ldr	r5, [pc, #52]	@ (8004748 <__libc_init_array+0x38>)
 8004714:	2600      	movs	r6, #0
 8004716:	4c0d      	ldr	r4, [pc, #52]	@ (800474c <__libc_init_array+0x3c>)
 8004718:	1b64      	subs	r4, r4, r5
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	42a6      	cmp	r6, r4
 800471e:	d109      	bne.n	8004734 <__libc_init_array+0x24>
 8004720:	4d0b      	ldr	r5, [pc, #44]	@ (8004750 <__libc_init_array+0x40>)
 8004722:	2600      	movs	r6, #0
 8004724:	4c0b      	ldr	r4, [pc, #44]	@ (8004754 <__libc_init_array+0x44>)
 8004726:	f000 f817 	bl	8004758 <_init>
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	42a6      	cmp	r6, r4
 8004730:	d105      	bne.n	800473e <__libc_init_array+0x2e>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	f855 3b04 	ldr.w	r3, [r5], #4
 8004738:	3601      	adds	r6, #1
 800473a:	4798      	blx	r3
 800473c:	e7ee      	b.n	800471c <__libc_init_array+0xc>
 800473e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004742:	3601      	adds	r6, #1
 8004744:	4798      	blx	r3
 8004746:	e7f2      	b.n	800472e <__libc_init_array+0x1e>
 8004748:	08004780 	.word	0x08004780
 800474c:	08004780 	.word	0x08004780
 8004750:	08004780 	.word	0x08004780
 8004754:	08004784 	.word	0x08004784

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
