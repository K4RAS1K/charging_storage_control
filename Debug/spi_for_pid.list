
spi_for_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c64  08005c64  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c64  08005c64  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c64  08005c64  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00006c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c68  08005c68  00006c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005c6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08005c78  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08005c78  00007138  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dba6  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd2  00000000  00000000  00014be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000169c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c9  00000000  00000000  00017580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c08  00000000  00000000  00017e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3b8  00000000  00000000  00038a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d279d  00000000  00000000  00046e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001195a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000328c  00000000  00000000  001195ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0011c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08005c3c 	.word	0x08005c3c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08005c3c 	.word	0x08005c3c

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	@ 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	3c01      	subs	r4, #1
 80003d4:	bf28      	it	cs
 80003d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003da:	d2e9      	bcs.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2uiz>:
 8000b44:	004a      	lsls	r2, r1, #1
 8000b46:	d211      	bcs.n	8000b6c <__aeabi_d2uiz+0x28>
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b4c:	d211      	bcs.n	8000b72 <__aeabi_d2uiz+0x2e>
 8000b4e:	d50d      	bpl.n	8000b6c <__aeabi_d2uiz+0x28>
 8000b50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d40e      	bmi.n	8000b78 <__aeabi_d2uiz+0x34>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d102      	bne.n	8000b7e <__aeabi_d2uiz+0x3a>
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	4770      	bx	lr
 8000b7e:	f04f 0000 	mov.w	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_d2f>:
 8000b84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b8c:	bf24      	itt	cs
 8000b8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b96:	d90d      	bls.n	8000bb4 <__aeabi_d2f+0x30>
 8000b98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bac:	bf08      	it	eq
 8000bae:	f020 0001 	biceq.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb8:	d121      	bne.n	8000bfe <__aeabi_d2f+0x7a>
 8000bba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bbe:	bfbc      	itt	lt
 8000bc0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	4770      	bxlt	lr
 8000bc6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bce:	f1c2 0218 	rsb	r2, r2, #24
 8000bd2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bda:	fa20 f002 	lsr.w	r0, r0, r2
 8000bde:	bf18      	it	ne
 8000be0:	f040 0001 	orrne.w	r0, r0, #1
 8000be4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf0:	ea40 000c 	orr.w	r0, r0, ip
 8000bf4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bfc:	e7cc      	b.n	8000b98 <__aeabi_d2f+0x14>
 8000bfe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c02:	d107      	bne.n	8000c14 <__aeabi_d2f+0x90>
 8000c04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c08:	bf1e      	ittt	ne
 8000c0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c12:	4770      	bxne	lr
 8000c14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <AD7683_Read>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float AD7683_Read(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
    uint16_t data = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	807b      	strh	r3, [r7, #2]
    float out_data = 0;
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]

    if (HAL_SPI_Receive(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c34:	1cb9      	adds	r1, r7, #2
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <AD7683_Read+0x50>)
 8000c3e:	f004 fd81 	bl	8005744 <HAL_SPI_Receive>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <AD7683_Read+0x28>
        Error_Handler();
 8000c48:	f000 fade 	bl	8001208 <Error_Handler>
    }

    out_data = data / 65,535 * 5;
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <AD7683_Read+0x54>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	099b      	lsrs	r3, r3, #6
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	edc7 7a01 	vstr	s15, [r7, #4]
    return out_data;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	ee07 3a90 	vmov	s15, r3
}
 8000c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000a4 	.word	0x200000a4
 8000c78:	fc0fc0fd 	.word	0xfc0fc0fd
 8000c7c:	00000000 	.word	0x00000000

08000c80 <ADC_Read>:

uint16_t ADC_Read(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    uint16_t data = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	80fb      	strh	r3, [r7, #6]
    float out_data = 0;
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]

    HAL_ADC_Start(&hadc1);
 8000c90:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <ADC_Read+0x80>)
 8000c92:	f001 fa2f 	bl	80020f4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000c96:	2164      	movs	r1, #100	@ 0x64
 8000c98:	4819      	ldr	r0, [pc, #100]	@ (8000d00 <ADC_Read+0x80>)
 8000c9a:	f001 fac1 	bl	8002220 <HAL_ADC_PollForConversion>
    data = HAL_ADC_GetValue(&hadc1);
 8000c9e:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <ADC_Read+0x80>)
 8000ca0:	f001 fb4d 	bl	800233e <HAL_ADC_GetValue>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 8000ca8:	4815      	ldr	r0, [pc, #84]	@ (8000d00 <ADC_Read+0x80>)
 8000caa:	f001 fa86 	bl	80021ba <HAL_ADC_Stop>
    out_data = data / 4095 * 3.3;
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <ADC_Read+0x84>)
 8000cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb6:	1ad2      	subs	r2, r2, r3
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	0adb      	lsrs	r3, r3, #11
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc3b 	bl	800053c <__aeabi_i2d>
 8000cc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8000cf8 <ADC_Read+0x78>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fca0 	bl	8000610 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff ff54 	bl	8000b84 <__aeabi_d2f>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	603b      	str	r3, [r7, #0]
    return out_data;
 8000ce0:	edd7 7a00 	vldr	s15, [r7]
 8000ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce8:	ee17 3a90 	vmov	r3, s15
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	66666666 	.word	0x66666666
 8000cfc:	400a6666 	.word	0x400a6666
 8000d00:	20000028 	.word	0x20000028
 8000d04:	00100101 	.word	0x00100101

08000d08 <DAC_Write>:

void DAC_Write(float data) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t data_to_DAC = data * 4095 / 3.3;
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000d68 <DAC_Write+0x60>
 8000d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1e:	ee17 0a90 	vmov	r0, s15
 8000d22:	f7ff fc1d 	bl	8000560 <__aeabi_f2d>
 8000d26:	a30e      	add	r3, pc, #56	@ (adr r3, 8000d60 <DAC_Write+0x58>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fd9a 	bl	8000864 <__aeabi_ddiv>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff ff04 	bl	8000b44 <__aeabi_d2uiz>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	81fb      	strh	r3, [r7, #14]

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <DAC_Write+0x64>)
 8000d44:	f002 fa2c 	bl	80031a0 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data_to_DAC);
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <DAC_Write+0x64>)
 8000d50:	f002 fa92 	bl	8003278 <HAL_DAC_SetValue>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	f3af 8000 	nop.w
 8000d60:	66666666 	.word	0x66666666
 8000d64:	400a6666 	.word	0x400a6666
 8000d68:	457ff000 	.word	0x457ff000
 8000d6c:	20000090 	.word	0x20000090

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b092      	sub	sp, #72	@ 0x48
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    /* Initialise PID controller */
    PIDController pid = { PID_KP, PID_KI, PID_KD,
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2238      	movs	r2, #56	@ 0x38
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 ff30 	bl	8005be2 <memset>
 8000d82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <main+0xe0>)
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <main+0xe4>)
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <main+0xe8>)
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <main+0xec>)
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <main+0xf0>)
 8000da6:	623b      	str	r3, [r7, #32]
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <main+0xf4>)
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
                          PID_TAU,
                          PID_LIM_MIN, PID_LIM_MAX,
			  PID_LIM_MIN_INT, PID_LIM_MAX_INT,
                          SAMPLE_TIME_S };

    PIDController_Init(&pid);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fc2d 	bl	800160e <PIDController_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f000 fd0e 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f85a 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbc:	f000 f9c4 	bl	8001148 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dc0:	f000 f8c2 	bl	8000f48 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000dc4:	f000 f924 	bl	8001010 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000dc8:	f000 f966 	bl	8001098 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8000dcc:	f000 f958 	bl	8001080 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  float setpoint = 0;
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  float measurement = 0;
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float v_out = 0;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_10))
 8000de2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de6:	4820      	ldr	r0, [pc, #128]	@ (8000e68 <main+0xf8>)
 8000de8:	f002 fd7c 	bl	80038e4 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f7      	beq.n	8000de2 <main+0x72>
      {
    	  setpoint = ADC_Read();
 8000df2:	f7ff ff45 	bl	8000c80 <ADC_Read>
 8000df6:	4603      	mov	r3, r0
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e00:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    	  measurement = AD7683_Read();
 8000e04:	f7ff ff0e 	bl	8000c24 <AD7683_Read>
 8000e08:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    	  PIDController_Update(&pid, setpoint, measurement);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8000e12:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fc17 	bl	800164a <PIDController_Update>
    	  v_out = pid.out;
 8000e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
    	  if(v_out > 0.4) {
 8000e20:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000e22:	f7ff fb9d 	bl	8000560 <__aeabi_f2d>
 8000e26:	a308      	add	r3, pc, #32	@ (adr r3, 8000e48 <main+0xd8>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fe80 	bl	8000b30 <__aeabi_dcmpgt>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <main+0xca>
    		  v_out = 0.4;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <main+0xfc>)
 8000e38:	647b      	str	r3, [r7, #68]	@ 0x44
    	  }
    	  DAC_Write(v_out);
 8000e3a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000e3e:	f7ff ff63 	bl	8000d08 <DAC_Write>
      if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_10))
 8000e42:	e7ce      	b.n	8000de2 <main+0x72>
 8000e44:	f3af 8000 	nop.w
 8000e48:	9999999a 	.word	0x9999999a
 8000e4c:	3fd99999 	.word	0x3fd99999
 8000e50:	3ca3d70a 	.word	0x3ca3d70a
 8000e54:	c1200000 	.word	0xc1200000
 8000e58:	41200000 	.word	0x41200000
 8000e5c:	c0a00000 	.word	0xc0a00000
 8000e60:	40a00000 	.word	0x40a00000
 8000e64:	3c23d70a 	.word	0x3c23d70a
 8000e68:	42020400 	.word	0x42020400
 8000e6c:	3ecccccd 	.word	0x3ecccccd

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09c      	sub	sp, #112	@ 0x70
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2250      	movs	r2, #80	@ 0x50
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 feaf 	bl	8005be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e96:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <SystemClock_Config+0xd4>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f44 <SystemClock_Config+0xd4>)
 8000e9c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ea0:	6113      	str	r3, [r2, #16]
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <SystemClock_Config+0xd4>)
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eae:	bf00      	nop
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <SystemClock_Config+0xd4>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d1f9      	bne.n	8000eb0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
 8000ebc:	2318      	movs	r3, #24
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ec0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000edc:	2320      	movs	r3, #32
 8000ede:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000eec:	2308      	movs	r3, #8
 8000eee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fd31 	bl	8003964 <HAL_RCC_OscConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f08:	f000 f97e 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0c:	231f      	movs	r3, #31
 8000f0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f10:	2303      	movs	r3, #3
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f14:	2308      	movs	r3, #8
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2103      	movs	r1, #3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f952 	bl	80041d4 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f36:	f000 f967 	bl	8001208 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3770      	adds	r7, #112	@ 0x70
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	44020800 	.word	0x44020800

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2220      	movs	r2, #32
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fe44 	bl	8005be2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800100c <MX_ADC1_Init+0xc4>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc2:	4811      	ldr	r0, [pc, #68]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000fc4:	f000 ff48 	bl	8001e58 <HAL_ADC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000fce:	f000 f91b 	bl	8001208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fde:	237f      	movs	r3, #127	@ 0x7f
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_ADC1_Init+0xc0>)
 8000ff0:	f001 f9b2 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000ffa:	f000 f905 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000028 	.word	0x20000028
 800100c:	42028000 	.word	0x42028000

08001010 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	222c      	movs	r2, #44	@ 0x2c
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fde0 	bl	8005be2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_DAC1_Init+0x68>)
 8001024:	4a15      	ldr	r2, [pc, #84]	@ (800107c <MX_DAC1_Init+0x6c>)
 8001026:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	@ (8001078 <MX_DAC1_Init+0x68>)
 800102a:	f002 f897 	bl	800315c <HAL_DAC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001034:	f000 f8e8 	bl	8001208 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001050:	2304      	movs	r3, #4
 8001052:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <MX_DAC1_Init+0x68>)
 8001060:	f002 f938 	bl	80032d4 <HAL_DAC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 800106a:	f000 f8cd 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	@ 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000090 	.word	0x20000090
 800107c:	42028400 	.word	0x42028400

08001080 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001084:	f002 fc5e 	bl	8003944 <HAL_ICACHE_Enable>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800108e:	f000 f8bb 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <MX_SPI1_Init+0xa8>)
 800109e:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <MX_SPI1_Init+0xac>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010b4:	220f      	movs	r2, #15
 80010b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010c6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_SPI1_Init+0xa8>)
 8001102:	2200      	movs	r2, #0
 8001104:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_SPI1_Init+0xa8>)
 8001108:	2200      	movs	r2, #0
 800110a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_SPI1_Init+0xa8>)
 800110e:	2200      	movs	r2, #0
 8001110:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_SPI1_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_SPI1_Init+0xa8>)
 800111a:	2200      	movs	r2, #0
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_SPI1_Init+0xa8>)
 8001120:	2200      	movs	r2, #0
 8001122:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_SPI1_Init+0xa8>)
 8001126:	2200      	movs	r2, #0
 8001128:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_SPI1_Init+0xa8>)
 800112c:	f004 fa0e 	bl	800554c <HAL_SPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001136:	f000 f867 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000a4 	.word	0x200000a4
 8001144:	40013000 	.word	0x40013000

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_GPIO_Init+0xb8>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001164:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <MX_GPIO_Init+0xb8>)
 8001166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_GPIO_Init+0xb8>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_GPIO_Init+0xb8>)
 800117e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001182:	4a1f      	ldr	r2, [pc, #124]	@ (8001200 <MX_GPIO_Init+0xb8>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_GPIO_Init+0xb8>)
 800118e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_GPIO_Init+0xb8>)
 800119c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <MX_GPIO_Init+0xb8>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_GPIO_Init+0xb8>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	4811      	ldr	r0, [pc, #68]	@ (8001204 <MX_GPIO_Init+0xbc>)
 80011be:	f002 fba9 	bl	8003914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	480a      	ldr	r0, [pc, #40]	@ (8001204 <MX_GPIO_Init+0xbc>)
 80011da:	f002 fa31 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 80011de:	f240 4302 	movw	r3, #1026	@ 0x402
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_GPIO_Init+0xbc>)
 80011f4:	f002 fa24 	bl	8003640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	44020c00 	.word	0x44020c00
 8001204:	42020400 	.word	0x42020400

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ac      	sub	sp, #176	@ 0xb0
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2288      	movs	r2, #136	@ 0x88
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fccc 	bl	8005be2 <memset>
  if(hadc->Instance==ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_ADC_MspInit+0xb8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13e      	bne.n	80012d2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001254:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001260:	2300      	movs	r3, #0
 8001262:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fab3 	bl	80047d4 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001274:	f7ff ffc8 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 800127a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 8001280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001284:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 800128a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 8001298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129c:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_ADC_MspInit+0xbc>)
 80012a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <HAL_ADC_MspInit+0xc0>)
 80012ce:	f002 f9b7 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	37b0      	adds	r7, #176	@ 0xb0
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	42028000 	.word	0x42028000
 80012e0:	44020c00 	.word	0x44020c00
 80012e4:	42020000 	.word	0x42020000

080012e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ac      	sub	sp, #176	@ 0xb0
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2288      	movs	r2, #136	@ 0x88
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fc6a 	bl	8005be2 <memset>
  if(hdac->Instance==DAC1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a22      	ldr	r2, [pc, #136]	@ (800139c <HAL_DAC_MspInit+0xb4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13c      	bne.n	8001392 <HAL_DAC_MspInit+0xaa>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DAC;
 8001318:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fa53 	bl	80047d4 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 8001334:	f7ff ff68 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 800133a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133e:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 8001340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001344:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 800134a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 8001358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135c:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_DAC_MspInit+0xb8>)
 8001368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001374:	2310      	movs	r3, #16
 8001376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <HAL_DAC_MspInit+0xbc>)
 800138e:	f002 f957 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	37b0      	adds	r7, #176	@ 0xb0
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	42028400 	.word	0x42028400
 80013a0:	44020c00 	.word	0x44020c00
 80013a4:	42020000 	.word	0x42020000

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ac      	sub	sp, #176	@ 0xb0
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2288      	movs	r2, #136	@ 0x88
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fc0a 	bl	8005be2 <memset>
  if(hspi->Instance==SPI1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a26      	ldr	r2, [pc, #152]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d144      	bne.n	8001462 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80013e4:	2300      	movs	r3, #0
 80013e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 f9f1 	bl	80047d4 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013f8:	f7ff ff06 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 80013fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001402:	4a1b      	ldr	r2, [pc, #108]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 8001404:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001408:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 800140e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 800141c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_NSS
    PA2     ------> SPI1_SCK
    PA3     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001438:	230e      	movs	r3, #14
 800143a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8001450:	2304      	movs	r3, #4
 8001452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	@ (8001474 <HAL_SPI_MspInit+0xcc>)
 800145e:	f002 f8ef 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37b0      	adds	r7, #176	@ 0xb0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40013000 	.word	0x40013000
 8001470:	44020c00 	.word	0x44020c00
 8001474:	42020000 	.word	0x42020000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 fa1f 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <SystemInit+0xc8>)
 80014e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e4:	4a2e      	ldr	r2, [pc, #184]	@ (80015a0 <SystemInit+0xc8>)
 80014e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <SystemInit+0xcc>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <SystemInit+0xcc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <SystemInit+0xcc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001500:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <SystemInit+0xcc>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4927      	ldr	r1, [pc, #156]	@ (80015a4 <SystemInit+0xcc>)
 8001506:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <SystemInit+0xd0>)
 8001508:	4013      	ands	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800150c:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <SystemInit+0xcc>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <SystemInit+0xcc>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <SystemInit+0xcc>)
 800151a:	4a24      	ldr	r2, [pc, #144]	@ (80015ac <SystemInit+0xd4>)
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <SystemInit+0xcc>)
 8001520:	2200      	movs	r2, #0
 8001522:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <SystemInit+0xcc>)
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <SystemInit+0xd4>)
 8001528:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <SystemInit+0xcc>)
 800152c:	2200      	movs	r2, #0
 800152e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <SystemInit+0xcc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <SystemInit+0xcc>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <SystemInit+0xcc>)
 800153e:	2200      	movs	r2, #0
 8001540:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <SystemInit+0xc8>)
 8001544:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001548:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <SystemInit+0xd8>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001552:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800155a:	d003      	beq.n	8001564 <SystemInit+0x8c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001562:	d117      	bne.n	8001594 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <SystemInit+0xd8>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <SystemInit+0xd8>)
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <SystemInit+0xdc>)
 8001574:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <SystemInit+0xd8>)
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <SystemInit+0xe0>)
 800157a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <SystemInit+0xd8>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <SystemInit+0xd8>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <SystemInit+0xd8>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <SystemInit+0xd8>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	61d3      	str	r3, [r2, #28]
  }
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	44020c00 	.word	0x44020c00
 80015a8:	fae2eae3 	.word	0xfae2eae3
 80015ac:	01010280 	.word	0x01010280
 80015b0:	40022000 	.word	0x40022000
 80015b4:	08192a3b 	.word	0x08192a3b
 80015b8:	4c5d6e7f 	.word	0x4c5d6e7f

080015bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015c2:	e003      	b.n	80015cc <LoopCopyDataInit>

080015c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015ca:	3104      	adds	r1, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015cc:	480b      	ldr	r0, [pc, #44]	@ (80015fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015d4:	d3f6      	bcc.n	80015c4 <CopyDataInit>
	ldr	r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015d8:	e002      	b.n	80015e0 <LoopFillZerobss>

080015da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015dc:	f842 3b04 	str.w	r3, [r2], #4

080015e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <LoopForever+0x16>)
	cmp	r2, r3
 80015e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015e4:	d3f9      	bcc.n	80015da <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e6:	f7ff ff77 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f004 fb03 	bl	8005bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ee:	f7ff fbbf 	bl	8000d70 <main>

080015f2 <LoopForever>:

LoopForever:
    b LoopForever
 80015f2:	e7fe      	b.n	80015f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80015f4:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80015f8:	08005c6c 	.word	0x08005c6c
	ldr	r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001600:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001604:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001608:	20000138 	.word	0x20000138

0800160c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_IRQHandler>

0800160e <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->prevError  = 0.0f;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->differentiator  = 0.0f;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->prevMeasurement = 0.0f;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->out = 0.0f;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800164a:	b480      	push	{r7}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	ed87 0a02 	vstr	s0, [r7, #8]
 8001656:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 800165a:	ed97 7a02 	vldr	s14, [r7, #8]
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ed97 7a05 	vldr	s14, [r7, #20]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 7a01 	vldr	s15, [r3, #4]
 8001688:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800168c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	edd3 7a08 	vldr	s15, [r3, #32]
 8001696:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 80016a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	edd3 7a07 	vldr	s15, [r3, #28]
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	dd04      	ble.n	80016d6 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80016d4:	e00e      	b.n	80016f4 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	edd3 7a06 	vldr	s15, [r3, #24]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d503      	bpl.n	80016f4 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24

	/*
	* Derivative (band-limited differentiator)
	*/
		
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001704:	edd7 6a01 	vldr	s13, [r7, #4]
 8001708:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800170c:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	edd3 7a03 	vldr	s15, [r3, #12]
 8001716:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001720:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001732:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	edd3 7a03 	vldr	s15, [r3, #12]
 800173c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edd3 7a08 	vldr	s15, [r3, #32]
 8001746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800175a:	edd7 7a04 	vldr	s15, [r7, #16]
 800175e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    if (pid->out > pid->limMax) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	edd3 7a05 	vldr	s15, [r3, #20]
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	dd04      	ble.n	8001792 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001790:	e00e      	b.n	80017b0 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	edd3 7a04 	vldr	s15, [r3, #16]
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d503      	bpl.n	80017b0 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	635a      	str	r2, [r3, #52]	@ 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->prevMeasurement = measurement;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Return controller output */
    return pid->out;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c0:	ee07 3a90 	vmov	s15, r3

}
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f001 fbea 	bl	8002fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017de:	f002 feb1 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_Init+0x44>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	490b      	ldr	r1, [pc, #44]	@ (800181c <HAL_Init+0x48>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_Init+0x4c>)
 80017f6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f001 fc21 	bl	8003040 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f810 	bl	8001824 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e002      	b.n	8001814 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800180e:	f7ff fd01 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	44020c00 	.word	0x44020c00
 800181c:	08005c54 	.word	0x08005c54
 8001820:	20000000 	.word	0x20000000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <HAL_InitTick+0xdc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e05c      	b.n	80018f6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800183c:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <HAL_InitTick+0xe0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d10c      	bne.n	8001862 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001848:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <HAL_InitTick+0xe4>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b2c      	ldr	r3, [pc, #176]	@ (8001900 <HAL_InitTick+0xdc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e037      	b.n	80018d2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001862:	f001 fc45 	bl	80030f0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001866:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d023      	beq.n	80018b6 <HAL_InitTick+0x92>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d82d      	bhi.n	80018d0 <HAL_InitTick+0xac>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_InitTick+0x5e>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d00d      	beq.n	800189c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001880:	e026      	b.n	80018d0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_InitTick+0xe4>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_InitTick+0xdc>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001890:	fbb3 f3f1 	udiv	r3, r3, r1
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	60fb      	str	r3, [r7, #12]
        break;
 800189a:	e01a      	b.n	80018d2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_InitTick+0xdc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
        break;
 80018b4:	e00d      	b.n	80018d2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_InitTick+0xdc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	60fb      	str	r3, [r7, #12]
        break;
 80018ce:	e000      	b.n	80018d2 <HAL_InitTick+0xae>
        break;
 80018d0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f001 fb92 	bl	8002ffc <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e009      	b.n	80018f6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e2:	2200      	movs	r2, #0
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	f001 fb6d 	bl	8002fc8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80018ee:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_InitTick+0xe8>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	e000e010 	.word	0xe000e010
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000134 	.word	0x20000134

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000134 	.word	0x20000134

08001950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80019c6:	f043 0202 	orr.w	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80019e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	42028000 	.word	0x42028000

08001a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3360      	adds	r3, #96	@ 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <LL_ADC_SetOffset+0x44>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	03fff000 	.word	0x03fff000

08001a4c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3360      	adds	r3, #96	@ 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	@ 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3360      	adds	r3, #96	@ 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3360      	adds	r3, #96	@ 0x60
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	615a      	str	r2, [r3, #20]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b087      	sub	sp, #28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3330      	adds	r3, #48	@ 0x30
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	211f      	movs	r1, #31
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 011f 	and.w	r1, r3, #31
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0e5b      	lsrs	r3, r3, #25
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0d1b      	lsrs	r3, r3, #20
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2107      	movs	r1, #7
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	0d1b      	lsrs	r3, r3, #20
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0318 	and.w	r3, r3, #24
 8001c36:	4908      	ldr	r1, [pc, #32]	@ (8001c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c38:	40d9      	lsrs	r1, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c42:	431a      	orrs	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	000fffff 	.word	0x000fffff

08001c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6093      	str	r3, [r2, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d34:	f043 0202 	orr.w	r2, r3, #2
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsEnabled+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsEnabled+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_IsDisableOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_IsDisableOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e1e:	f043 0220 	orr.w	r2, r3, #32
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e131      	b.n	80020d6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff f9cf 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fef1 	bl	8001c80 <LL_ADC_IsDeepPowerDownEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fed7 	bl	8001c5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff0c 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fef0 	bl	8001ca8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec8:	4b85      	ldr	r3, [pc, #532]	@ (80020e0 <HAL_ADC_Init+0x288>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	4a85      	ldr	r2, [pc, #532]	@ (80020e4 <HAL_ADC_Init+0x28c>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff feee 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff62 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 8001f20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 80ca 	bne.w	80020c4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80c6 	bne.w	80020c4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f40:	f043 0202 	orr.w	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fefb 	bl	8001d48 <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f58:	4863      	ldr	r0, [pc, #396]	@ (80020e8 <HAL_ADC_Init+0x290>)
 8001f5a:	f7ff fef5 	bl	8001d48 <LL_ADC_IsEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4860      	ldr	r0, [pc, #384]	@ (80020ec <HAL_ADC_Init+0x294>)
 8001f6c:	f7ff fcf0 	bl	8001950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e5b      	ldrb	r3, [r3, #25]
 8001f74:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f7a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f80:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f86:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d106      	bne.n	8001fac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	045b      	lsls	r3, r3, #17
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b48      	ldr	r3, [pc, #288]	@ (80020f0 <HAL_ADC_Init+0x298>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff1b 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 8001ffc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d13d      	bne.n	8002080 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13a      	bne.n	8002080 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
 800200e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002016:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002026:	f023 0302 	bic.w	r3, r3, #2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	430b      	orrs	r3, r1
 8002032:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d118      	bne.n	8002070 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002060:	430a      	orrs	r2, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	e007      	b.n	8002080 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10c      	bne.n	80020a2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f023 010f 	bic.w	r1, r3, #15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a0:	e007      	b.n	80020b2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020f 	bic.w	r2, r2, #15
 80020b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020c2:	e007      	b.n	80020d4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000
 80020e4:	053e2d63 	.word	0x053e2d63
 80020e8:	42028000 	.word	0x42028000
 80020ec:	42028300 	.word	0x42028300
 80020f0:	fff04007 	.word	0xfff04007

080020f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fe6f 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14f      	bne.n	80021ac <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_Start+0x26>
 8002116:	2302      	movs	r3, #2
 8002118:	e04b      	b.n	80021b2 <HAL_ADC_Start+0xbe>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fdd4 	bl	8002cd0 <ADC_Enable>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d137      	bne.n	80021a2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002136:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002152:	d106      	bne.n	8002162 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	f023 0206 	bic.w	r2, r3, #6
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002160:	e002      	b.n	8002168 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	221c      	movs	r2, #28
 800216e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800218e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fdfa 	bl	8001d94 <LL_ADC_REG_StartConversion>
 80021a0:	e006      	b.n	80021b0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80021aa:	e001      	b.n	80021b0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_Stop+0x16>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e023      	b.n	8002218 <HAL_ADC_Stop+0x5e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021d8:	2103      	movs	r1, #3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fcbc 	bl	8002b58 <ADC_ConversionStop>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d111      	bne.n	800220e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fdf2 	bl	8002dd4 <ADC_Disable>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d102      	bne.n	8002238 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002232:	2308      	movs	r3, #8
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e010      	b.n	800225a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06f      	b.n	8002336 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002256:	2304      	movs	r3, #4
 8002258:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800225a:	f7ff fb6d 	bl	8001938 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002260:	e021      	b.n	80022a6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d01d      	beq.n	80022a6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800226a:	f7ff fb65 	bl	8001938 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d302      	bcc.n	8002280 <HAL_ADC_PollForConversion+0x60>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d112      	bne.n	80022a6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e047      	b.n	8002336 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0d6      	beq.n	8002262 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc3b 	bl	8001b40 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e5b      	ldrb	r3, [r3, #25]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d118      	bne.n	800230a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d111      	bne.n	800230a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d104      	bne.n	8002322 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e008      	b.n	8002334 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	220c      	movs	r2, #12
 8002332:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0b6      	sub	sp, #216	@ 0xd8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x22>
 8002376:	2302      	movs	r3, #2
 8002378:	e3d8      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x7d4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fd2c 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 83bd 	bne.w	8002b0e <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d104      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb1b 	bl	80019dc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fbd7 	bl	8001b66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fd11 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 80023c2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fd31 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 80023d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 81d9 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 81d4 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023f0:	d10f      	bne.n	8002412 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7ff fbde 	bl	8001bbe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fb85 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>
 8002410:	e00e      	b.n	8002430 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	461a      	mov	r2, r3
 8002420:	f7ff fbcd 	bl	8001bbe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fb75 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d022      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002462:	f7ff facf 	bl	8001a04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	461a      	mov	r2, r3
 8002474:	f7ff fb1b 	bl	8001aae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_ADC_ConfigChannel+0x136>
 8002488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248c:	e000      	b.n	8002490 <HAL_ADC_ConfigChannel+0x138>
 800248e:	2300      	movs	r3, #0
 8002490:	461a      	mov	r2, r3
 8002492:	f7ff fb27 	bl	8001ae4 <LL_ADC_SetOffsetSaturation>
 8002496:	e17b      	b.n	8002790 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fad4 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x16c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fac9 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 021f 	and.w	r2, r3, #31
 80024c2:	e01e      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fabe 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80024e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80024ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e004      	b.n	8002500 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80024f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1c2>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	e018      	b.n	800254c <HAL_ADC_ConfigChannel+0x1f4>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800252e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fa8d 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fa71 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_ADC_ConfigChannel+0x232>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fa66 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	e01e      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x270>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fa5b 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80025a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80025b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e004      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80025bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x288>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	e018      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2ba>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80025f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80025fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e004      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002612:	429a      	cmp	r2, r3
 8002614:	d106      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fa2a 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fa0e 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x2f8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2102      	movs	r1, #2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fa03 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	e01e      	b.n	800268e <HAL_ADC_ConfigChannel+0x336>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f9f8 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800266e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002676:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x34e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	e016      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x37c>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80026b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80026be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80026ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f9c9 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f9ad 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x3ba>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2103      	movs	r1, #3
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f9a2 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	e017      	b.n	8002742 <HAL_ADC_ConfigChannel+0x3ea>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2103      	movs	r1, #3
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f997 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800272a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800272c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800272e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_ADC_ConfigChannel+0x402>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	e011      	b.n	800277e <HAL_ADC_ConfigChannel+0x426>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800276a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800276c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8002776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800277e:	429a      	cmp	r2, r3
 8002780:	d106      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	2103      	movs	r1, #3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f974 	bl	8001a78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fad7 	bl	8001d48 <LL_ADC_IsEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 813f 	bne.w	8002a20 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fa30 	bl	8001c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a8e      	ldr	r2, [pc, #568]	@ (80029f4 <HAL_ADC_ConfigChannel+0x69c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f040 8130 	bne.w	8002a20 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x490>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	3301      	adds	r3, #1
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2b09      	cmp	r3, #9
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e019      	b.n	800281c <HAL_ADC_ConfigChannel+0x4c4>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80027f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80027fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002804:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b09      	cmp	r3, #9
 8002814:	bf94      	ite	ls
 8002816:	2301      	movls	r3, #1
 8002818:	2300      	movhi	r3, #0
 800281a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281c:	2b00      	cmp	r3, #0
 800281e:	d079      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x4e4>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	3301      	adds	r3, #1
 8002834:	069b      	lsls	r3, r3, #26
 8002836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283a:	e015      	b.n	8002868 <HAL_ADC_ConfigChannel+0x510>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800284a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800284c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800284e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x530>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	3301      	adds	r3, #1
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	e017      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x560>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002898:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800289a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80028a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_ADC_ConfigChannel+0x586>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	3301      	adds	r3, #1
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	051b      	lsls	r3, r3, #20
 80028dc:	e018      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5b8>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80028fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	430b      	orrs	r3, r1
 8002912:	e080      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5d8>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	069b      	lsls	r3, r3, #26
 800292a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292e:	e015      	b.n	800295c <HAL_ADC_ConfigChannel+0x604>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 800294c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_ADC_ConfigChannel+0x624>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	e017      	b.n	80029ac <HAL_ADC_ConfigChannel+0x654>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	61fb      	str	r3, [r7, #28]
  return result;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	ea42 0103 	orr.w	r1, r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x680>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	3b1e      	subs	r3, #30
 80029d0:	051b      	lsls	r3, r3, #20
 80029d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	e01d      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x6bc>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	613b      	str	r3, [r7, #16]
  return result;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e005      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x6a8>
 80029f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b1e      	subs	r3, #30
 8002a0e:	051b      	lsls	r3, r3, #20
 8002a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7ff f8cf 	bl	8001bbe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d079      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a2c:	4842      	ldr	r0, [pc, #264]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a2e:	f7fe ffb5 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 8002a32:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d124      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11e      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3b      	ldr	r2, [pc, #236]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7e8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d164      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4835      	ldr	r0, [pc, #212]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a62:	f7fe ff88 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a66:	4b37      	ldr	r3, [pc, #220]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	4a36      	ldr	r2, [pc, #216]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	3301      	adds	r3, #1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a7a:	e002      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a88:	e04a      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b4c <HAL_ADC_ConfigChannel+0x7f4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d113      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7e8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d13a      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4820      	ldr	r0, [pc, #128]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ab6:	f7fe ff5e 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aba:	e031      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7f8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d113      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d121      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ae0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4814      	ldr	r0, [pc, #80]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ae8:	f7fe ff45 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7fc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d113      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7e8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe ff56 	bl	80019b8 <LL_ADC_EnableChannelVDDcore>
 8002b0c:	e008      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b28:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	37d8      	adds	r7, #216	@ 0xd8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	80080000 	.word	0x80080000
 8002b38:	42028300 	.word	0x42028300
 8002b3c:	c3210000 	.word	0xc3210000
 8002b40:	42028000 	.word	0x42028000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	053e2d63 	.word	0x053e2d63
 8002b4c:	88600004 	.word	0x88600004
 8002b50:	c7520000 	.word	0xc7520000
 8002b54:	99200040 	.word	0x99200040

08002b58 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f938 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f959 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 8002b80:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8098 	beq.w	8002cc0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d02a      	beq.n	8002bf4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7e5b      	ldrb	r3, [r3, #25]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d126      	bne.n	8002bf4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7e1b      	ldrb	r3, [r3, #24]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d122      	bne.n	8002bf4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002bb2:	e014      	b.n	8002bde <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4a45      	ldr	r2, [pc, #276]	@ (8002ccc <ADC_ConversionStop+0x174>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d90d      	bls.n	8002bd8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e074      	b.n	8002cc2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	d1e3      	bne.n	8002bb4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2240      	movs	r2, #64	@ 0x40
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d014      	beq.n	8002c24 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f8f0 	bl	8001de4 <LL_ADC_REG_IsConversionOngoing>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f8ad 	bl	8001d6e <LL_ADC_IsDisableOngoing>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f8cc 	bl	8001dbc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d014      	beq.n	8002c54 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f8ff 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00c      	beq.n	8002c54 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f895 	bl	8001d6e <LL_ADC_IsDisableOngoing>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f8db 	bl	8001e0a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d005      	beq.n	8002c66 <ADC_ConversionStop+0x10e>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d105      	bne.n	8002c6c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c60:	230c      	movs	r3, #12
 8002c62:	617b      	str	r3, [r7, #20]
        break;
 8002c64:	e005      	b.n	8002c72 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002c66:	2308      	movs	r3, #8
 8002c68:	617b      	str	r3, [r7, #20]
        break;
 8002c6a:	e002      	b.n	8002c72 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	617b      	str	r3, [r7, #20]
        break;
 8002c70:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c72:	f7fe fe61 	bl	8001938 <HAL_GetTick>
 8002c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c78:	e01b      	b.n	8002cb2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c7a:	f7fe fe5d 	bl	8001938 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d914      	bls.n	8002cb2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1dc      	bne.n	8002c7a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	a33fffff 	.word	0xa33fffff

08002cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f831 	bl	8001d48 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d166      	bne.n	8002dba <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <ADC_Enable+0xf4>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e052      	b.n	8002dbc <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe ffec 	bl	8001cf8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d20:	4829      	ldr	r0, [pc, #164]	@ (8002dc8 <ADC_Enable+0xf8>)
 8002d22:	f7fe fe3b 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 8002d26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <ADC_Enable+0xfc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <ADC_Enable+0x100>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d44:	e002      	b.n	8002d4c <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fdf1 	bl	8001938 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d58:	e028      	b.n	8002dac <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fff2 	bl	8001d48 <LL_ADC_IsEnabled>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe ffc2 	bl	8001cf8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d74:	f7fe fde0 	bl	8001938 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d914      	bls.n	8002dac <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d00d      	beq.n	8002dac <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d94:	f043 0210 	orr.w	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d1cf      	bne.n	8002d5a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	8000003f 	.word	0x8000003f
 8002dc8:	42028300 	.word	0x42028300
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	053e2d63 	.word	0x053e2d63

08002dd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe ffc4 	bl	8001d6e <LL_ADC_IsDisableOngoing>
 8002de6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe ffab 	bl	8001d48 <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d047      	beq.n	8002e88 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d144      	bne.n	8002e88 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030d 	and.w	r3, r3, #13
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10c      	bne.n	8002e26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ff85 	bl	8001d20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fd8b 	bl	8001938 <HAL_GetTick>
 8002e22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e24:	e029      	b.n	8002e7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e023      	b.n	8002e8a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e42:	f7fe fd79 	bl	8001938 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d914      	bls.n	8002e7a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	f043 0210 	orr.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e007      	b.n	8002e8a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1dc      	bne.n	8002e42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff6a 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd6:	f7ff ff81 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8002fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7ff ffb3 	bl	8002f4c <NVIC_EncodePriority>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff82 	bl	8002ef8 <__NVIC_SetPriority>
}
 8002ff4:	bf00      	nop
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800300c:	d301      	bcc.n	8003012 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800300e:	2301      	movs	r3, #1
 8003010:	e00d      	b.n	800302e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_SYSTICK_Config+0x40>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_SYSTICK_Config+0x40>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_SYSTICK_Config+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a05      	ldr	r2, [pc, #20]	@ (800303c <HAL_SYSTICK_Config+0x40>)
 8003026:	f043 0303 	orr.w	r3, r3, #3
 800302a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e010 	.word	0xe000e010

08003040 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d844      	bhi.n	80030d8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800304e:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003077 	.word	0x08003077
 8003058:	08003095 	.word	0x08003095
 800305c:	080030b7 	.word	0x080030b7
 8003060:	080030d9 	.word	0x080030d9
 8003064:	08003069 	.word	0x08003069
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003068:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6013      	str	r3, [r2, #0]
      break;
 8003074:	e031      	b.n	80030da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003076:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003082:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003088:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800308a:	f023 030c 	bic.w	r3, r3, #12
 800308e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003092:	e022      	b.n	80030da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030a6:	f023 030c 	bic.w	r3, r3, #12
 80030aa:	4a10      	ldr	r2, [pc, #64]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030b4:	e011      	b.n	80030da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a0b      	ldr	r2, [pc, #44]	@ (80030e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030c8:	f023 030c 	bic.w	r3, r3, #12
 80030cc:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030d6:	e000      	b.n	80030da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80030d8:	bf00      	nop
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010
 80030ec:	44020c00 	.word	0x44020c00

080030f0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80030f6:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003102:	2304      	movs	r3, #4
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	e01e      	b.n	8003146 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003108:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800310a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d00f      	beq.n	800313a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d80f      	bhi.n	8003140 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d003      	beq.n	8003134 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800312c:	e008      	b.n	8003140 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
        break;
 8003132:	e008      	b.n	8003146 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003134:	2301      	movs	r3, #1
 8003136:	607b      	str	r3, [r7, #4]
        break;
 8003138:	e005      	b.n	8003146 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800313a:	2302      	movs	r3, #2
 800313c:	607b      	str	r3, [r7, #4]
        break;
 800313e:	e002      	b.n	8003146 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003140:	2300      	movs	r3, #0
 8003142:	607b      	str	r3, [r7, #4]
        break;
 8003144:	bf00      	nop
    }
  }
  return systick_source;
 8003146:	687b      	ldr	r3, [r7, #4]
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e010 	.word	0xe000e010
 8003158:	44020c00 	.word	0x44020c00

0800315c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e014      	b.n	8003198 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe f8b2 	bl	80012e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e056      	b.n	8003262 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	795b      	ldrb	r3, [r3, #5]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_DAC_Start+0x20>
 80031bc:	2302      	movs	r3, #2
 80031be:	e050      	b.n	8003262 <HAL_DAC_Start+0xc2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_DAC_Start+0xd0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <HAL_DAC_Start+0xd4>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80031f6:	e002      	b.n	80031fe <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003214:	2b02      	cmp	r3, #2
 8003216:	d11d      	bne.n	8003254 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	e014      	b.n	8003254 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2102      	movs	r1, #2
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0202 	orr.w	r2, r2, #2
 8003252:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000
 8003274:	053e2d63 	.word	0x053e2d63

08003278 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e018      	b.n	80032c6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3308      	adds	r3, #8
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e004      	b.n	80032bc <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3314      	adds	r3, #20
 80032ba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	@ 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_DAC_ConfigChannel+0x1e>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e19a      	b.n	800362c <HAL_DAC_ConfigChannel+0x358>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	795b      	ldrb	r3, [r3, #5]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_DAC_ConfigChannel+0x2e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e194      	b.n	800362c <HAL_DAC_ConfigChannel+0x358>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2202      	movs	r2, #2
 800330c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d17a      	bne.n	800340c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003316:	f7fe fb0f 	bl	8001938 <HAL_GetTick>
 800331a:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13d      	bne.n	800339e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003322:	e018      	b.n	8003356 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003324:	f7fe fb08 	bl	8001938 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d911      	bls.n	8003356 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f043 0208 	orr.w	r2, r3, #8
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2203      	movs	r2, #3
 8003350:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e16a      	b.n	800362c <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1df      	bne.n	8003324 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	6a12      	ldr	r2, [r2, #32]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
 800336e:	e020      	b.n	80033b2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003370:	f7fe fae2 	bl	8001938 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d90f      	bls.n	800339e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	da0a      	bge.n	800339e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f043 0208 	orr.w	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2203      	movs	r2, #3
 8003398:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e146      	b.n	800362c <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dbe3      	blt.n	8003370 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	6a12      	ldr	r2, [r2, #32]
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	ea02 0103 	and.w	r1, r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	21ff      	movs	r1, #255	@ 0xff
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	ea02 0103 	and.w	r1, r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d11d      	bne.n	8003450 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	221f      	movs	r2, #31
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342c:	4013      	ands	r3, r2
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003444:	4313      	orrs	r3, r2
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2207      	movs	r2, #7
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	4013      	ands	r3, r2
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 800346c:	4b71      	ldr	r3, [pc, #452]	@ (8003634 <HAL_DAC_ConfigChannel+0x360>)
 800346e:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d116      	bne.n	80034ac <HAL_DAC_ConfigChannel+0x1d8>
  {
    if ((Channel == DAC_CHANNEL_1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <HAL_DAC_ConfigChannel+0x1d8>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d003      	beq.n	8003494 <HAL_DAC_ConfigChannel+0x1c0>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d10b      	bne.n	80034ac <HAL_DAC_ConfigChannel+0x1d8>
    {
      /* Update return status */
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2204      	movs	r2, #4
 800349e:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_DAC_ConfigChannel+0x1e6>
  {
    connectOnChip = 0x00000000UL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b8:	e00f      	b.n	80034da <HAL_DAC_ConfigChannel+0x206>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d102      	bne.n	80034c8 <HAL_DAC_ConfigChannel+0x1f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c6:	e008      	b.n	80034da <HAL_DAC_ConfigChannel+0x206>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_DAC_ConfigChannel+0x202>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034d0:	2301      	movs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	e001      	b.n	80034da <HAL_DAC_ConfigChannel+0x206>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034fc:	4013      	ands	r3, r2
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <HAL_DAC_ConfigChannel+0x23a>
 8003508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800350c:	e000      	b.n	8003510 <HAL_DAC_ConfigChannel+0x23c>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	4313      	orrs	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003528:	4013      	ands	r3, r2
 800352a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	795b      	ldrb	r3, [r3, #5]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <HAL_DAC_ConfigChannel+0x266>
 8003534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003538:	e000      	b.n	800353c <HAL_DAC_ConfigChannel+0x268>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	4313      	orrs	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d114      	bne.n	800357c <HAL_DAC_ConfigChannel+0x2a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003552:	f001 f923 	bl	800479c <HAL_RCC_GetHCLKFreq>
 8003556:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4a37      	ldr	r2, [pc, #220]	@ (8003638 <HAL_DAC_ConfigChannel+0x364>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d904      	bls.n	800356a <HAL_DAC_ConfigChannel+0x296>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003568:	e00f      	b.n	800358a <HAL_DAC_ConfigChannel+0x2b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a33      	ldr	r2, [pc, #204]	@ (800363c <HAL_DAC_ConfigChannel+0x368>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d90a      	bls.n	8003588 <HAL_DAC_ConfigChannel+0x2b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357a:	e006      	b.n	800358a <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003582:	4313      	orrs	r3, r2
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003586:	e000      	b.n	800358a <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003588:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003598:	4313      	orrs	r3, r2
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	400a      	ands	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035dc:	4013      	ands	r3, r2
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035f4:	4313      	orrs	r3, r2
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	22c0      	movs	r2, #192	@ 0xc0
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	400a      	ands	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003628:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800362c:	4618      	mov	r0, r3
 800362e:	3730      	adds	r7, #48	@ 0x30
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	08fff80e 	.word	0x08fff80e
 8003638:	09896800 	.word	0x09896800
 800363c:	04c4b400 	.word	0x04c4b400

08003640 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800364e:	e136      	b.n	80038be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8128 	beq.w	80038b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x38>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b12      	cmp	r3, #18
 8003676:	d125      	bne.n	80036c4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d00b      	beq.n	8003718 <HAL_GPIO_Init+0xd8>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d007      	beq.n	8003718 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800370c:	2b11      	cmp	r3, #17
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b12      	cmp	r3, #18
 8003716:	d130      	bne.n	800377a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374e:	2201      	movs	r2, #1
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4013      	ands	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 0201 	and.w	r2, r3, #1
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d017      	beq.n	80037b2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4013      	ands	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d07c      	beq.n	80038b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80037be:	4a47      	ldr	r2, [pc, #284]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	3318      	adds	r3, #24
 80037c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4013      	ands	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0a9a      	lsrs	r2, r3, #10
 80037e6:	4b3e      	ldr	r3, [pc, #248]	@ (80038e0 <HAL_GPIO_Init+0x2a0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	f002 0203 	and.w	r2, r2, #3
 80037f0:	00d2      	lsls	r2, r2, #3
 80037f2:	4093      	lsls	r3, r2
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80037fa:	4938      	ldr	r1, [pc, #224]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3318      	adds	r3, #24
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003808:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800382c:	4a2b      	ldr	r2, [pc, #172]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003832:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4013      	ands	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003856:	4a21      	ldr	r2, [pc, #132]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800385c:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43db      	mvns	r3, r3
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4013      	ands	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003882:	4a16      	ldr	r2, [pc, #88]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 800388c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003890:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	43db      	mvns	r3, r3
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4013      	ands	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80038b0:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <HAL_GPIO_Init+0x29c>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	3301      	adds	r3, #1
 80038bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f aec1 	bne.w	8003650 <HAL_GPIO_Init+0x10>
  }
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	44022000 	.word	0x44022000
 80038e0:	002f7f7f 	.word	0x002f7f7f

080038e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e001      	b.n	8003906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
 8003920:	4613      	mov	r3, r2
 8003922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003924:	787b      	ldrb	r3, [r7, #1]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003930:	e002      	b.n	8003938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_ICACHE_Enable+0x1c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_ICACHE_Enable+0x1c>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40030400 	.word	0x40030400

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f000 bc28 	b.w	80041c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003978:	4b94      	ldr	r3, [pc, #592]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0318 	and.w	r3, r3, #24
 8003980:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003982:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b08      	cmp	r3, #8
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x46>
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	d114      	bne.n	80039ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d111      	bne.n	80039ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f000 bc08 	b.w	80041c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80039b8:	4b84      	ldr	r3, [pc, #528]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	4981      	ldr	r1, [pc, #516]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80039cc:	e040      	b.n	8003a50 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d023      	beq.n	8003a1e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039d6:	4b7d      	ldr	r3, [pc, #500]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7c      	ldr	r2, [pc, #496]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fd ffa9 	bl	8001938 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80039ea:	f7fd ffa5 	bl	8001938 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e3e5      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039fc:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003a08:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	496d      	ldr	r1, [pc, #436]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	618b      	str	r3, [r1, #24]
 8003a1c:	e018      	b.n	8003a50 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6a      	ldr	r2, [pc, #424]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd ff85 	bl	8001938 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003a32:	f7fd ff81 	bl	8001938 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e3c1      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003a44:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a0 	beq.w	8003b9e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_OscConfig+0x10c>
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 8092 	bne.w	8003b9e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e3a4      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x132>
 8003a88:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x160>
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b48      	ldr	r3, [pc, #288]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a47      	ldr	r2, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ab0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a44      	ldr	r2, [pc, #272]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e041      	b.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x190>
 8003ace:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b3c      	ldr	r3, [pc, #240]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ae0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a38      	ldr	r2, [pc, #224]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e029      	b.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003afc:	d112      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1c0>
 8003afe:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a32      	ldr	r2, [pc, #200]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b30      	ldr	r3, [pc, #192]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b2d      	ldr	r3, [pc, #180]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e011      	b.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a28      	ldr	r2, [pc, #160]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a25      	ldr	r2, [pc, #148]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fef2 	bl	8001938 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b58:	f7fd feee 	bl	8001938 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e32e      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1f4>
 8003b76:	e012      	b.n	8003b9e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fede 	bl	8001938 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b80:	f7fd feda 	bl	8001938 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e31a      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <HAL_RCC_OscConfig+0x268>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 809a 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x25a>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b18      	cmp	r3, #24
 8003bb6:	d149      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d146      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e2fe      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
 8003bca:	bf00      	nop
 8003bcc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003bd6:	4b9a      	ldr	r3, [pc, #616]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0218 	and.w	r2, r3, #24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d014      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003be6:	4b96      	ldr	r3, [pc, #600]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 0218 	bic.w	r2, r3, #24
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	4993      	ldr	r1, [pc, #588]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003bf8:	f000 fdd0 	bl	800479c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bfc:	4b91      	ldr	r3, [pc, #580]	@ (8003e44 <HAL_RCC_OscConfig+0x4e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fe0f 	bl	8001824 <HAL_InitTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e2db      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fe92 	bl	8001938 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fe8e 	bl	8001938 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e2ce      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2a:	4b85      	ldr	r3, [pc, #532]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c36:	4b82      	ldr	r3, [pc, #520]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	497e      	ldr	r1, [pc, #504]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003c4a:	e049      	b.n	8003ce0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02c      	beq.n	8003cae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003c54:	4b7a      	ldr	r3, [pc, #488]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0218 	bic.w	r2, r3, #24
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4977      	ldr	r1, [pc, #476]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003c66:	4b76      	ldr	r3, [pc, #472]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a75      	ldr	r2, [pc, #468]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fe61 	bl	8001938 <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fe5d 	bl	8001938 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e29d      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c98:	4b69      	ldr	r3, [pc, #420]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	4966      	ldr	r1, [pc, #408]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	610b      	str	r3, [r1, #16]
 8003cac:	e018      	b.n	8003ce0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a63      	ldr	r2, [pc, #396]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fd fe3d 	bl	8001938 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fe39 	bl	8001938 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e279      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d03c      	beq.n	8003d66 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf4:	4b52      	ldr	r3, [pc, #328]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfa:	4a51      	ldr	r2, [pc, #324]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003cfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd fe18 	bl	8001938 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d0c:	f7fd fe14 	bl	8001938 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e254      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d1e:	4b48      	ldr	r3, [pc, #288]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <HAL_RCC_OscConfig+0x3a8>
 8003d2c:	e01b      	b.n	8003d66 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b44      	ldr	r3, [pc, #272]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d34:	4a42      	ldr	r2, [pc, #264]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003d36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fd fdfb 	bl	8001938 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d46:	f7fd fdf7 	bl	8001938 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e237      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ef      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80d2 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d74:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <HAL_RCC_OscConfig+0x4e4>)
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d80:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <HAL_RCC_OscConfig+0x4e4>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	4a30      	ldr	r2, [pc, #192]	@ (8003e48 <HAL_RCC_OscConfig+0x4e4>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fdd4 	bl	8001938 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd fdd0 	bl	8001938 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e210      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003da6:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <HAL_RCC_OscConfig+0x4e4>)
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x468>
 8003dba:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dca:	e074      	b.n	8003eb6 <HAL_RCC_OscConfig+0x552>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d118      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4a2>
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dda:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003de4:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dea:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003dec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003df0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e04:	e057      	b.n	8003eb6 <HAL_RCC_OscConfig+0x552>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d11e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4e8>
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e14:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e1e:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e24:	4a06      	ldr	r2, [pc, #24]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e2e:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e34:	4a02      	ldr	r2, [pc, #8]	@ (8003e40 <HAL_RCC_OscConfig+0x4dc>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e3e:	e03a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x552>
 8003e40:	44020c00 	.word	0x44020c00
 8003e44:	20000004 	.word	0x20000004
 8003e48:	44020800 	.word	0x44020800
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b85      	cmp	r3, #133	@ 0x85
 8003e52:	d118      	bne.n	8003e86 <HAL_RCC_OscConfig+0x522>
 8003e54:	4ba2      	ldr	r3, [pc, #648]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e5a:	4aa1      	ldr	r2, [pc, #644]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e64:	4b9e      	ldr	r3, [pc, #632]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e6a:	4a9d      	ldr	r2, [pc, #628]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e74:	4b9a      	ldr	r3, [pc, #616]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e7a:	4a99      	ldr	r2, [pc, #612]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e84:	e017      	b.n	8003eb6 <HAL_RCC_OscConfig+0x552>
 8003e86:	4b96      	ldr	r3, [pc, #600]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8c:	4a94      	ldr	r2, [pc, #592]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e96:	4b92      	ldr	r3, [pc, #584]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9c:	4a90      	ldr	r2, [pc, #576]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003e9e:	f023 0304 	bic.w	r3, r3, #4
 8003ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ea6:	4b8e      	ldr	r3, [pc, #568]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eac:	4a8c      	ldr	r2, [pc, #560]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fd3b 	bl	8001938 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fd37 	bl	8001938 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e175      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003edc:	4b80      	ldr	r3, [pc, #512]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ed      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x562>
 8003eea:	e015      	b.n	8003f18 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd fd24 	bl	8001938 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fd20 	bl	8001938 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e15e      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0a:	4b75      	ldr	r3, [pc, #468]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ed      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d036      	beq.n	8003f92 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd fcfe 	bl	8001938 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f40:	f7fd fcfa 	bl	8001938 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e13a      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f52:	4b63      	ldr	r3, [pc, #396]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x5dc>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f60:	4b5f      	ldr	r3, [pc, #380]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fd fce4 	bl	8001938 <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f74:	f7fd fce0 	bl	8001938 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e120      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f86:	4b56      	ldr	r3, [pc, #344]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8115 	beq.w	80041c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b18      	cmp	r3, #24
 8003fa0:	f000 80af 	beq.w	8004102 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f040 8086 	bne.w	80040ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003fae:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003fb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fd fcbd 	bl	8001938 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003fc2:	f7fd fcb9 	bl	8001938 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0f9      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fe8:	f023 0303 	bic.w	r3, r3, #3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ff4:	0212      	lsls	r2, r2, #8
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	4939      	ldr	r1, [pc, #228]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	3b01      	subs	r3, #1
 8004004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	3b01      	subs	r3, #1
 800400e:	025b      	lsls	r3, r3, #9
 8004010:	b29b      	uxth	r3, r3
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	3b01      	subs	r3, #1
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800402e:	492c      	ldr	r1, [pc, #176]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004034:	4b2a      	ldr	r3, [pc, #168]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	4a29      	ldr	r2, [pc, #164]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004044:	4a26      	ldr	r2, [pc, #152]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800404a:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004050:	f043 0310 	orr.w	r3, r3, #16
 8004054:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004056:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f023 020c 	bic.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	491f      	ldr	r1, [pc, #124]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004068:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	f023 0220 	bic.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004074:	491a      	ldr	r1, [pc, #104]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800407a:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004084:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004086:	4b16      	ldr	r3, [pc, #88]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 800408c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd fc51 	bl	8001938 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800409a:	f7fd fc4d 	bl	8001938 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e08d      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040ac:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x736>
 80040b8:	e085      	b.n	80041c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <HAL_RCC_OscConfig+0x77c>)
 80040c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd fc37 	bl	8001938 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80040ce:	f7fd fc33 	bl	8001938 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d903      	bls.n	80040e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e073      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
 80040e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040e4:	4b3a      	ldr	r3, [pc, #232]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80040f0:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	4a36      	ldr	r2, [pc, #216]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80040f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8004100:	e061      	b.n	80041c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004102:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004108:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 800410a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	2b01      	cmp	r3, #1
 8004114:	d031      	beq.n	800417a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d12a      	bne.n	800417a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d122      	bne.n	800417a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d11a      	bne.n	800417a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	0a5b      	lsrs	r3, r3, #9
 8004148:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d111      	bne.n	800417a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004162:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d108      	bne.n	800417a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	0e1b      	lsrs	r3, r3, #24
 800416c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e024      	b.n	80041c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	08db      	lsrs	r3, r3, #3
 8004184:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800418c:	429a      	cmp	r2, r3
 800418e:	d01a      	beq.n	80041c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	4a0e      	ldr	r2, [pc, #56]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 8004196:	f023 0310 	bic.w	r3, r3, #16
 800419a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fbcc 	bl	8001938 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80041a2:	bf00      	nop
 80041a4:	f7fd fbc8 	bl	8001938 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d0f9      	beq.n	80041a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b4:	4a06      	ldr	r2, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <HAL_RCC_OscConfig+0x86c>)
 80041c0:	f043 0310 	orr.w	r3, r3, #16
 80041c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	44020c00 	.word	0x44020c00

080041d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e19e      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b83      	ldr	r3, [pc, #524]	@ (80043f8 <HAL_RCC_ClockConfig+0x224>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b80      	ldr	r3, [pc, #512]	@ (80043f8 <HAL_RCC_ClockConfig+0x224>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	497e      	ldr	r1, [pc, #504]	@ (80043f8 <HAL_RCC_ClockConfig+0x224>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b7c      	ldr	r3, [pc, #496]	@ (80043f8 <HAL_RCC_ClockConfig+0x224>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e186      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	4b74      	ldr	r3, [pc, #464]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004232:	429a      	cmp	r2, r3
 8004234:	d909      	bls.n	800424a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004236:	4b71      	ldr	r3, [pc, #452]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	496d      	ldr	r1, [pc, #436]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004246:	4313      	orrs	r3, r2
 8004248:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004264:	429a      	cmp	r2, r3
 8004266:	d909      	bls.n	800427c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004268:	4b64      	ldr	r3, [pc, #400]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4961      	ldr	r1, [pc, #388]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004278:	4313      	orrs	r3, r2
 800427a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4b5b      	ldr	r3, [pc, #364]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004294:	429a      	cmp	r2, r3
 8004296:	d908      	bls.n	80042aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004298:	4b58      	ldr	r3, [pc, #352]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4955      	ldr	r1, [pc, #340]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	4b50      	ldr	r3, [pc, #320]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d908      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80042c6:	4b4d      	ldr	r3, [pc, #308]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 020f 	bic.w	r2, r3, #15
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	494a      	ldr	r1, [pc, #296]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8093 	beq.w	800440c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042ee:	4b43      	ldr	r3, [pc, #268]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d121      	bne.n	800433e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e113      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	4b3d      	ldr	r3, [pc, #244]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d115      	bne.n	800433e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e107      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800431e:	4b37      	ldr	r3, [pc, #220]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0fb      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432e:	4b33      	ldr	r3, [pc, #204]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0f3      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	492c      	ldr	r1, [pc, #176]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 800434c:	4313      	orrs	r3, r2
 800434e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fd faf2 	bl	8001938 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d112      	bne.n	8004384 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fd faea 	bl	8001938 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0d7      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004376:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f003 0318 	and.w	r3, r3, #24
 800437e:	2b18      	cmp	r3, #24
 8004380:	d1ee      	bne.n	8004360 <HAL_RCC_ClockConfig+0x18c>
 8004382:	e043      	b.n	800440c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d112      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800438e:	f7fd fad3 	bl	8001938 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e0c0      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a4:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f003 0318 	and.w	r3, r3, #24
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d1ee      	bne.n	800438e <HAL_RCC_ClockConfig+0x1ba>
 80043b0:	e02c      	b.n	800440c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d122      	bne.n	8004400 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fd fabc 	bl	8001938 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0a9      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <HAL_RCC_ClockConfig+0x228>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0318 	and.w	r3, r3, #24
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d1ee      	bne.n	80043bc <HAL_RCC_ClockConfig+0x1e8>
 80043de:	e015      	b.n	800440c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7fd faaa 	bl	8001938 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d906      	bls.n	8004400 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e097      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
 80043f6:	bf00      	nop
 80043f8:	40022000 	.word	0x40022000
 80043fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004400:	4b4b      	ldr	r3, [pc, #300]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0318 	and.w	r3, r3, #24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e9      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	4b44      	ldr	r3, [pc, #272]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	429a      	cmp	r2, r3
 8004426:	d208      	bcs.n	800443a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004428:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 020f 	bic.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	493e      	ldr	r1, [pc, #248]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800443a:	4b3e      	ldr	r3, [pc, #248]	@ (8004534 <HAL_RCC_ClockConfig+0x360>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d210      	bcs.n	800446a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004448:	4b3a      	ldr	r3, [pc, #232]	@ (8004534 <HAL_RCC_ClockConfig+0x360>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 020f 	bic.w	r2, r3, #15
 8004450:	4938      	ldr	r1, [pc, #224]	@ (8004534 <HAL_RCC_ClockConfig+0x360>)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004458:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <HAL_RCC_ClockConfig+0x360>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e05d      	b.n	8004526 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004482:	429a      	cmp	r2, r3
 8004484:	d208      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004486:	4b2a      	ldr	r3, [pc, #168]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4927      	ldr	r1, [pc, #156]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d209      	bcs.n	80044ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80044b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	491a      	ldr	r1, [pc, #104]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d209      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	490e      	ldr	r1, [pc, #56]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044fc:	f000 f822 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_ClockConfig+0x35c>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490b      	ldr	r1, [pc, #44]	@ (8004538 <HAL_RCC_ClockConfig+0x364>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <HAL_RCC_ClockConfig+0x368>)
 8004514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HAL_RCC_ClockConfig+0x36c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd f982 	bl	8001824 <HAL_InitTick>
 8004520:	4603      	mov	r3, r0
 8004522:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004524:	7afb      	ldrb	r3, [r7, #11]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	44020c00 	.word	0x44020c00
 8004534:	40022000 	.word	0x40022000
 8004538:	08005c54 	.word	0x08005c54
 800453c:	20000000 	.word	0x20000000
 8004540:	20000004 	.word	0x20000004

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800454a:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0318 	and.w	r3, r3, #24
 8004552:	2b08      	cmp	r3, #8
 8004554:	d102      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004556:	4b8a      	ldr	r3, [pc, #552]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e107      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800455c:	4b87      	ldr	r3, [pc, #540]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0318 	and.w	r3, r3, #24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d112      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004568:	4b84      	ldr	r3, [pc, #528]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004574:	4b81      	ldr	r3, [pc, #516]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	08db      	lsrs	r3, r3, #3
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	4a81      	ldr	r2, [pc, #516]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x240>)
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e0f1      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004588:	4b7e      	ldr	r3, [pc, #504]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x240>)
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e0ee      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800458e:	4b7b      	ldr	r3, [pc, #492]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0318 	and.w	r3, r3, #24
 8004596:	2b10      	cmp	r3, #16
 8004598:	d102      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800459a:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCC_GetSysClockFreq+0x244>)
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e0e5      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045a0:	4b76      	ldr	r3, [pc, #472]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f003 0318 	and.w	r3, r3, #24
 80045a8:	2b18      	cmp	r3, #24
 80045aa:	f040 80dd 	bne.w	8004768 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80045ae:	4b73      	ldr	r3, [pc, #460]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80045b8:	4b70      	ldr	r3, [pc, #448]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045c4:	4b6d      	ldr	r3, [pc, #436]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80045d0:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80045d4:	08db      	lsrs	r3, r3, #3
 80045d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80b7 	beq.w	8004762 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0xbe>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d056      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x16a>
 8004600:	e077      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004602:	4b5e      	ldr	r3, [pc, #376]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d02d      	beq.n	800466a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800460e:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	4a5a      	ldr	r2, [pc, #360]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x240>)
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004638:	4b50      	ldr	r3, [pc, #320]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 800463a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004648:	ed97 6a02 	vldr	s12, [r7, #8]
 800464c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800478c <HAL_RCC_GetSysClockFreq+0x248>
 8004650:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004654:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004668:	e065      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004674:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004790 <HAL_RCC_GetSysClockFreq+0x24c>
 8004678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467c:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 800467e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800468c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004690:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800478c <HAL_RCC_GetSysClockFreq+0x248>
 8004694:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004698:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800469c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80046ac:	e043      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004794 <HAL_RCC_GetSysClockFreq+0x250>
 80046bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c0:	4b2e      	ldr	r3, [pc, #184]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800478c <HAL_RCC_GetSysClockFreq+0x248>
 80046d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80046f0:	e021      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004798 <HAL_RCC_GetSysClockFreq+0x254>
 8004700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004714:	ed97 6a02 	vldr	s12, [r7, #8]
 8004718:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800478c <HAL_RCC_GetSysClockFreq+0x248>
 800471c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004720:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004724:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004728:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004730:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004734:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004736:	4b11      	ldr	r3, [pc, #68]	@ (800477c <HAL_RCC_GetSysClockFreq+0x238>)
 8004738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473a:	0a5b      	lsrs	r3, r3, #9
 800473c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004740:	3301      	adds	r3, #1
 8004742:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800474e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	ee17 3a90 	vmov	r3, s15
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e004      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e001      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x240>)
 800476a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800476c:	69fb      	ldr	r3, [r7, #28]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	@ 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	44020c00 	.word	0x44020c00
 8004780:	003d0900 	.word	0x003d0900
 8004784:	03d09000 	.word	0x03d09000
 8004788:	017d7840 	.word	0x017d7840
 800478c:	46000000 	.word	0x46000000
 8004790:	4c742400 	.word	0x4c742400
 8004794:	4bbebc20 	.word	0x4bbebc20
 8004798:	4a742400 	.word	0x4a742400

0800479c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80047a0:	f7ff fed0 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80047aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80047ae:	4907      	ldr	r1, [pc, #28]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x30>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80047b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80047bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80047c0:	681b      	ldr	r3, [r3, #0]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	44020c00 	.word	0x44020c00
 80047cc:	08005c54 	.word	0x08005c54
 80047d0:	20000000 	.word	0x20000000

080047d4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0aa      	sub	sp, #168	@ 0xa8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80047f8:	2500      	movs	r5, #0
 80047fa:	ea54 0305 	orrs.w	r3, r4, r5
 80047fe:	d00b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004800:	4bb8      	ldr	r3, [pc, #736]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004806:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800480a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	4ab4      	ldr	r2, [pc, #720]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004812:	430b      	orrs	r3, r1
 8004814:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004818:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 0801 	and.w	r8, r2, #1
 8004824:	f04f 0900 	mov.w	r9, #0
 8004828:	ea58 0309 	orrs.w	r3, r8, r9
 800482c:	d038      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800482e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	2b05      	cmp	r3, #5
 8004836:	d819      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004838:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004875 	.word	0x08004875
 8004844:	08004859 	.word	0x08004859
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	08004875 	.word	0x08004875
 8004854:	08004875 	.word	0x08004875
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004858:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800485c:	3308      	adds	r3, #8
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fddc 	bl	800541c <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800486a:	e004      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004876:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800487e:	4b99      	ldr	r3, [pc, #612]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004884:	f023 0107 	bic.w	r1, r3, #7
 8004888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	4a95      	ldr	r2, [pc, #596]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004890:	430b      	orrs	r3, r1
 8004892:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004896:	e003      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800489c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 0a02 	and.w	sl, r2, #2
 80048ac:	f04f 0b00 	mov.w	fp, #0
 80048b0:	ea5a 030b 	orrs.w	r3, sl, fp
 80048b4:	d03c      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80048b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048bc:	2b28      	cmp	r3, #40	@ 0x28
 80048be:	d01b      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80048c0:	2b28      	cmp	r3, #40	@ 0x28
 80048c2:	d815      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d019      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x128>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d811      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80048cc:	2b18      	cmp	r3, #24
 80048ce:	d017      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80048d0:	2b18      	cmp	r3, #24
 80048d2:	d80d      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d109      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048e0:	3308      	adds	r3, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd9a 	bl	800541c <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80048ee:	e00a      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80048f6:	e006      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80048f8:	bf00      	nop
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80048fc:	bf00      	nop
 80048fe:	e002      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800490e:	4b75      	ldr	r3, [pc, #468]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004914:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	4a71      	ldr	r2, [pc, #452]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004920:	430b      	orrs	r3, r1
 8004922:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004926:	e003      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800492c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004930:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 0304 	and.w	r3, r2, #4
 800493c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004946:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800494a:	460b      	mov	r3, r1
 800494c:	4313      	orrs	r3, r2
 800494e:	d040      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800495a:	d01e      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800495c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004960:	d817      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004966:	d01a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496c:	d811      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800496e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004970:	d017      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004972:	2bc0      	cmp	r3, #192	@ 0xc0
 8004974:	d80d      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d015      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800497a:	2b40      	cmp	r3, #64	@ 0x40
 800497c:	d109      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800497e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004982:	3308      	adds	r3, #8
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd49 	bl	800541c <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004990:	e00a      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800499a:	bf00      	nop
 800499c:	e004      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800499e:	bf00      	nop
 80049a0:	e002      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80049a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80049b0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049b6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80049ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	4a48      	ldr	r2, [pc, #288]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80049de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d043      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80049f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049fc:	d021      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a02:	d81a      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a08:	d01d      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004a0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a0e:	d814      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004a10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a14:	d019      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004a16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a1a:	d80e      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a24:	d109      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fcf5 	bl	800541c <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004a38:	e00a      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004a42:	bf00      	nop
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10c      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004a58:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a5e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a76:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a88:	2300      	movs	r3, #0
 8004a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a90:	460b      	mov	r3, r1
 8004a92:	4313      	orrs	r3, r2
 8004a94:	d03e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aa0:	d01b      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004aa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aa6:	d814      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aac:	d017      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ab2:	d80e      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fca9 	bl	800541c <RCCEx_PLL2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004ad0:	e00b      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004ad8:	e007      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004ada:	bf00      	nop
 8004adc:	e005      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004ae2:	bf00      	nop
 8004ae4:	44020c00 	.word	0x44020c00
        break;
 8004ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004af2:	4ba5      	ldr	r3, [pc, #660]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004af4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004af8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	4aa1      	ldr	r2, [pc, #644]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b10:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b20:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b22:	2300      	movs	r3, #0
 8004b24:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b26:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b3a:	d01b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004b3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b40:	d814      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004b42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b46:	d017      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b4c:	d80e      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d014      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b56:	d109      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc5c 	bl	800541c <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b86:	4b80      	ldr	r3, [pc, #512]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b8c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b96:	4a7c      	ldr	r2, [pc, #496]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b9e:	e003      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ba4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d033      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bce:	d015      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bd4:	d80e      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d012      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004bda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bde:	d109      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004be0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004be4:	3308      	adds	r3, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fc18 	bl	800541c <RCCEx_PLL2_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c10:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c22:	e003      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c28:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	2100      	movs	r1, #0
 8004c36:	6639      	str	r1, [r7, #96]	@ 0x60
 8004c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d033      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c52:	d015      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c58:	d80e      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d012      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c62:	d109      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c68:	3308      	adds	r3, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fbd6 	bl	800541c <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004c76:	e006      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c94:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ca6:	e003      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	d00e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004cd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cd6:	61d3      	str	r3, [r2, #28]
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce4:	4a28      	ldr	r2, [pc, #160]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cfc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d00:	460b      	mov	r3, r1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d046      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d10:	d021      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004d12:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d16:	d81a      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d01d      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d22:	d814      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d28:	d019      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d2e:	d80e      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d3e:	3308      	adds	r3, #8
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fb6b 	bl	800541c <RCCEx_PLL2_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10f      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004d6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d72:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7c:	4a02      	ldr	r2, [pc, #8]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d84:	e006      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d86:	bf00      	nop
 8004d88:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da2:	2300      	movs	r3, #0
 8004da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d043      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004dba:	d021      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004dbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004dc0:	d81a      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc6:	d01d      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dcc:	d814      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004dce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd2:	d019      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd8:	d80e      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	d109      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004de8:	3308      	adds	r3, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fb16 	bl	800541c <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004df6:	e00a      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004e00:	bf00      	nop
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e16:	4bb6      	ldr	r3, [pc, #728]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	4ab2      	ldr	r2, [pc, #712]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e34:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e46:	2300      	movs	r3, #0
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d030      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d80f      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d211      	bcs.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d911      	bls.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d109      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e6e:	3308      	adds	r3, #8
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fad3 	bl	800541c <RCCEx_PLL2_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004e94:	4b96      	ldr	r3, [pc, #600]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e9a:	f023 0107 	bic.w	r1, r3, #7
 8004e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ea4:	4a92      	ldr	r2, [pc, #584]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004eb2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d005      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004ef6:	4b7e      	ldr	r3, [pc, #504]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004efc:	f023 0108 	bic.w	r1, r3, #8
 8004f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f06:	4a7a      	ldr	r2, [pc, #488]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f26:	2300      	movs	r3, #0
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f000 80b0 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004f36:	4b6f      	ldr	r3, [pc, #444]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fcf9 	bl	8001938 <HAL_GetTick>
 8004f46:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004f4a:	e00b      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7fc fcf4 	bl	8001938 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d903      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004f62:	e005      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004f64:	4b63      	ldr	r3, [pc, #396]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ed      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004f70:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 808a 	bne.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d022      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d01b      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f9e:	4b54      	ldr	r3, [pc, #336]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fac:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fc2:	4a4b      	ldr	r2, [pc, #300]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fcc:	4a48      	ldr	r2, [pc, #288]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d019      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fc fca9 	bl	8001938 <HAL_GetTick>
 8004fe6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fea:	e00d      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc fca4 	bl	8001938 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d903      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005008:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800500a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ea      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005016:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d132      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800501e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502c:	d10f      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800502e:	4b30      	ldr	r3, [pc, #192]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800503a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005042:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005046:	4a2a      	ldr	r2, [pc, #168]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005048:	430b      	orrs	r3, r1
 800504a:	61d3      	str	r3, [r2, #28]
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800504e:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005054:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005058:	61d3      	str	r3, [r2, #28]
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800505c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005060:	4a23      	ldr	r2, [pc, #140]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800506c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005070:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507a:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800507c:	430b      	orrs	r3, r1
 800507e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005084:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005088:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800508c:	e003      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005092:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005096:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a4:	2300      	movs	r3, #0
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80050ac:	460b      	mov	r3, r1
 80050ae:	4313      	orrs	r3, r2
 80050b0:	d038      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80050b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b8:	2b30      	cmp	r3, #48	@ 0x30
 80050ba:	d014      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80050bc:	2b30      	cmp	r3, #48	@ 0x30
 80050be:	d80e      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d012      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x916>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d80a      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d106      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	4a06      	ldr	r2, [pc, #24]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80050d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80050dc:	e00d      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80050e4:	e009      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80050e6:	bf00      	nop
 80050e8:	e007      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80050ea:	bf00      	nop
 80050ec:	e005      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x926>
 80050ee:	bf00      	nop
 80050f0:	44020c00 	.word	0x44020c00
 80050f4:	44020800 	.word	0x44020800
        break;
 80050f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005102:	4bb5      	ldr	r3, [pc, #724]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005108:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800510c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005112:	49b1      	ldr	r1, [pc, #708]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005120:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
 8005136:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d03c      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005140:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005146:	2b04      	cmp	r3, #4
 8005148:	d81d      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005165 	.word	0x08005165
 8005154:	08005173 	.word	0x08005173
 8005158:	08005187 	.word	0x08005187
 800515c:	0800518f 	.word	0x0800518f
 8005160:	0800518f 	.word	0x0800518f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005164:	4b9c      	ldr	r3, [pc, #624]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	4a9b      	ldr	r2, [pc, #620]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800516a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005170:	e00e      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005172:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005176:	3308      	adds	r3, #8
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f94f 	bl	800541c <RCCEx_PLL2_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005184:	e004      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800518e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005190:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10c      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005198:	4b8f      	ldr	r3, [pc, #572]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800519a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800519e:	f023 0207 	bic.w	r2, r3, #7
 80051a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a8:	498b      	ldr	r1, [pc, #556]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051b6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051d0:	460b      	mov	r3, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	d03c      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80051d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d01f      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d819      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80051e4:	2b18      	cmp	r3, #24
 80051e6:	d01d      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80051e8:	2b18      	cmp	r3, #24
 80051ea:	d815      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d007      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80051f4:	e010      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f6:	4b78      	ldr	r3, [pc, #480]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	4a77      	ldr	r2, [pc, #476]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005200:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005202:	e010      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005208:	3308      	adds	r3, #8
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f906 	bl	800541c <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005216:	e006      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800521e:	e002      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005220:	bf00      	nop
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800522e:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005234:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	4966      	ldr	r1, [pc, #408]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005246:	e003      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800524c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005250:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005266:	460b      	mov	r3, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	d03e      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800526c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005276:	d020      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527c:	d819      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800527e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005280:	d01d      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005282:	2bc0      	cmp	r3, #192	@ 0xc0
 8005284:	d815      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800528a:	2b40      	cmp	r3, #64	@ 0x40
 800528c:	d007      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800528e:	e010      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005290:	4b51      	ldr	r3, [pc, #324]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	4a50      	ldr	r2, [pc, #320]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800529a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800529c:	e010      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800529e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052a2:	3308      	adds	r3, #8
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f8b9 	bl	800541c <RCCEx_PLL2_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80052b0:	e006      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052b8:	e002      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80052be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80052c8:	4b43      	ldr	r3, [pc, #268]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ce:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80052d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d8:	493f      	ldr	r1, [pc, #252]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052e6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	2100      	movs	r1, #0
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005300:	460b      	mov	r3, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	d038      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005306:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800530a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005310:	d00e      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d815      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800531c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005320:	d110      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005322:	4b2d      	ldr	r3, [pc, #180]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	4a2c      	ldr	r2, [pc, #176]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800532e:	e00e      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005334:	3308      	adds	r3, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f870 	bl	800541c <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005356:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800535c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	491c      	ldr	r1, [pc, #112]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800536e:	e003      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005374:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	2100      	movs	r1, #0
 8005382:	6039      	str	r1, [r7, #0]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d039      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800539a:	2b30      	cmp	r3, #48	@ 0x30
 800539c:	d01e      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800539e:	2b30      	cmp	r3, #48	@ 0x30
 80053a0:	d815      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d002      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d007      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80053aa:	e010      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80053b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80053b8:	e011      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053be:	3308      	adds	r3, #8
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f82b 	bl	800541c <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80053cc:	e007      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80053d6:	bf00      	nop
 80053d8:	44020c00 	.word	0x44020c00
        break;
 80053dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80053e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80053e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f6:	4908      	ldr	r1, [pc, #32]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80053fe:	e003      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005404:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005408:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 800540c:	4618      	mov	r0, r3
 800540e:	37a8      	adds	r7, #168	@ 0xa8
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	44020c00 	.word	0x44020c00

0800541c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005424:	4b48      	ldr	r3, [pc, #288]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a47      	ldr	r2, [pc, #284]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 800542a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800542e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005430:	f7fc fa82 	bl	8001938 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005436:	e008      	b.n	800544a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005438:	f7fc fa7e 	bl	8001938 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e07a      	b.n	8005540 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544a:	4b3f      	ldr	r3, [pc, #252]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005456:	4b3c      	ldr	r3, [pc, #240]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6811      	ldr	r1, [r2, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6852      	ldr	r2, [r2, #4]
 800546a:	0212      	lsls	r2, r2, #8
 800546c:	430a      	orrs	r2, r1
 800546e:	4936      	ldr	r1, [pc, #216]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005470:	4313      	orrs	r3, r2
 8005472:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	3b01      	subs	r3, #1
 800547a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	3b01      	subs	r3, #1
 8005484:	025b      	lsls	r3, r3, #9
 8005486:	b29b      	uxth	r3, r3
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	3b01      	subs	r3, #1
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	3b01      	subs	r3, #1
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054a4:	4928      	ldr	r1, [pc, #160]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	f023 020c 	bic.w	r2, r3, #12
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	4924      	ldr	r1, [pc, #144]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80054bc:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	f023 0220 	bic.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	491f      	ldr	r1, [pc, #124]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80054ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	491c      	ldr	r1, [pc, #112]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80054e8:	4b17      	ldr	r3, [pc, #92]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6a12      	ldr	r2, [r2, #32]
 80054f8:	00d2      	lsls	r2, r2, #3
 80054fa:	4913      	ldr	r1, [pc, #76]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005500:	4b11      	ldr	r3, [pc, #68]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a10      	ldr	r2, [pc, #64]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800550c:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005512:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005516:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005518:	f7fc fa0e 	bl	8001938 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800551e:	e008      	b.n	8005532 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005520:	f7fc fa0a 	bl	8001938 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005532:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <RCCEx_PLL2_Config+0x12c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0

}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	44020c00 	.word	0x44020c00

0800554c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e0e7      	b.n	800572e <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_SPI_Init+0x2c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d901      	bls.n	8005578 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0da      	b.n	800572e <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb17 	bl	8005bac <SPI_GetPacketSize>
 800557e:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <HAL_SPI_Init+0x42>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b08      	cmp	r3, #8
 800558c:	d811      	bhi.n	80055b2 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005592:	4a69      	ldr	r2, [pc, #420]	@ (8005738 <HAL_SPI_Init+0x1ec>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a67      	ldr	r2, [pc, #412]	@ (800573c <HAL_SPI_Init+0x1f0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_SPI_Init+0x60>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a66      	ldr	r2, [pc, #408]	@ (8005740 <HAL_SPI_Init+0x1f4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d104      	bne.n	80055b6 <HAL_SPI_Init+0x6a>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d901      	bls.n	80055b6 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0bb      	b.n	800572e <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fb feec 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80055f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055fc:	d119      	bne.n	8005632 <HAL_SPI_Init+0xe6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005606:	d103      	bne.n	8005610 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800561c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005620:	d107      	bne.n	8005632 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005630:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <HAL_SPI_Init+0x112>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d90b      	bls.n	800565e <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e007      	b.n	800566e <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800566c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	ea42 0103 	orr.w	r1, r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056da:	ea42 0103 	orr.w	r1, r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40013000 	.word	0x40013000
 800573c:	40003800 	.word	0x40003800
 8005740:	40003c00 	.word	0x40003c00

08005744 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3330      	adds	r3, #48	@ 0x30
 800575a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800575c:	f7fc f8ec 	bl	8001938 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
 8005770:	e172      	b.n	8005a58 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Receive+0x3a>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e16a      	b.n	8005a58 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_SPI_Receive+0x4c>
 800578c:	2302      	movs	r3, #2
 800578e:	e163      	b.n	8005a58 <HAL_SPI_Receive+0x314>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2204      	movs	r2, #4
 800579c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80057e8:	d108      	bne.n	80057fc <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e009      	b.n	8005810 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800580e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	88f9      	ldrh	r1, [r7, #6]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	430b      	orrs	r3, r1
 8005822:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800583c:	d107      	bne.n	800584e <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b0f      	cmp	r3, #15
 8005854:	d957      	bls.n	8005906 <HAL_SPI_Receive+0x1c2>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a81      	ldr	r2, [pc, #516]	@ (8005a60 <HAL_SPI_Receive+0x31c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04b      	beq.n	80058f8 <HAL_SPI_Receive+0x1b4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a7f      	ldr	r2, [pc, #508]	@ (8005a64 <HAL_SPI_Receive+0x320>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d046      	beq.n	80058f8 <HAL_SPI_Receive+0x1b4>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a68 <HAL_SPI_Receive+0x324>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d148      	bne.n	8005906 <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005874:	e040      	b.n	80058f8 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d014      	beq.n	80058b0 <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800588e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005890:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80058ae:	e023      	b.n	80058f8 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b0:	f7fc f842 	bl	8001938 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d803      	bhi.n	80058c8 <HAL_SPI_Receive+0x184>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d102      	bne.n	80058ce <HAL_SPI_Receive+0x18a>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d114      	bne.n	80058f8 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8cc 	bl	8005a6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0af      	b.n	8005a58 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1b8      	bne.n	8005876 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005904:	e095      	b.n	8005a32 <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b07      	cmp	r3, #7
 800590c:	f240 808b 	bls.w	8005a26 <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005910:	e03f      	b.n	8005992 <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d114      	bne.n	800594a <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	b292      	uxth	r2, r2
 800592a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8005948:	e023      	b.n	8005992 <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594a:	f7fb fff5 	bl	8001938 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d803      	bhi.n	8005962 <HAL_SPI_Receive+0x21e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d102      	bne.n	8005968 <HAL_SPI_Receive+0x224>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d114      	bne.n	8005992 <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f87f 	bl	8005a6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005974:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e062      	b.n	8005a58 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1b9      	bne.n	8005912 <HAL_SPI_Receive+0x1ce>
 800599e:	e048      	b.n	8005a32 <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d117      	bne.n	80059de <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80059dc:	e023      	b.n	8005a26 <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059de:	f7fb ffab 	bl	8001938 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d803      	bhi.n	80059f6 <HAL_SPI_Receive+0x2b2>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d102      	bne.n	80059fc <HAL_SPI_Receive+0x2b8>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d114      	bne.n	8005a26 <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f835 	bl	8005a6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e018      	b.n	8005a58 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1b6      	bne.n	80059a0 <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f81a 	bl	8005a6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
  }
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40013000 	.word	0x40013000
 8005a64:	40003800 	.word	0x40003800
 8005a68:	40003c00 	.word	0x40003c00

08005a6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0210 	orr.w	r2, r2, #16
 8005a9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005ace:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d014      	beq.n	8005b06 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0220 	orr.w	r2, r2, #32
 8005b04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d014      	beq.n	8005b3c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00f      	beq.n	8005b3c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b22:	f043 0204 	orr.w	r2, r3, #4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00f      	beq.n	8005b66 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00f      	beq.n	8005b90 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b76:	f043 0208 	orr.w	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3307      	adds	r3, #7
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <memset>:
 8005be2:	4402      	add	r2, r0
 8005be4:	4603      	mov	r3, r0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d100      	bne.n	8005bec <memset+0xa>
 8005bea:	4770      	bx	lr
 8005bec:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf0:	e7f9      	b.n	8005be6 <memset+0x4>
	...

08005bf4 <__libc_init_array>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8005c2c <__libc_init_array+0x38>)
 8005bf8:	2600      	movs	r6, #0
 8005bfa:	4c0d      	ldr	r4, [pc, #52]	@ (8005c30 <__libc_init_array+0x3c>)
 8005bfc:	1b64      	subs	r4, r4, r5
 8005bfe:	10a4      	asrs	r4, r4, #2
 8005c00:	42a6      	cmp	r6, r4
 8005c02:	d109      	bne.n	8005c18 <__libc_init_array+0x24>
 8005c04:	4d0b      	ldr	r5, [pc, #44]	@ (8005c34 <__libc_init_array+0x40>)
 8005c06:	2600      	movs	r6, #0
 8005c08:	4c0b      	ldr	r4, [pc, #44]	@ (8005c38 <__libc_init_array+0x44>)
 8005c0a:	f000 f817 	bl	8005c3c <_init>
 8005c0e:	1b64      	subs	r4, r4, r5
 8005c10:	10a4      	asrs	r4, r4, #2
 8005c12:	42a6      	cmp	r6, r4
 8005c14:	d105      	bne.n	8005c22 <__libc_init_array+0x2e>
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	4798      	blx	r3
 8005c20:	e7ee      	b.n	8005c00 <__libc_init_array+0xc>
 8005c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c26:	3601      	adds	r6, #1
 8005c28:	4798      	blx	r3
 8005c2a:	e7f2      	b.n	8005c12 <__libc_init_array+0x1e>
 8005c2c:	08005c64 	.word	0x08005c64
 8005c30:	08005c64 	.word	0x08005c64
 8005c34:	08005c64 	.word	0x08005c64
 8005c38:	08005c68 	.word	0x08005c68

08005c3c <_init>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr

08005c48 <_fini>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr
